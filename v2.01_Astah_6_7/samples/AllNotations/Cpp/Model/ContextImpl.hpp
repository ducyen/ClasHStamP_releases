#pragma once
/* File generated by Đức's ClasHStamP */
#include "Generic/CommonInclude.h"
#include "Model/Context.hpp"                                    
#include "Generic/Statemachine.h"

class ContextImpl: public Context{
    public:  enum AnEnum {
        One,                                                    
        Two,                                                    
        Three,                                                  
        AnEnum_NUM
    };
    public:  struct E1Params: public EventParams{
        AnEnum x;                                               
    };
    public: enum _EventId {
        E0,
        E1,
        E2,
        E3,
        E4,
        E5,
        evNum
    };
    const std::string EventId_toString( _EventId value );
    friend class AFriend;
    friend class Main;
    protected: virtual void protectedMethod(
    ){
    } /* ContextImpl.protectedMethod */

    protected:  static boolean checkE1Params(
        EventParams* e
    ){
        return ( ( E1Params* )e )->x == Two;
    } /* ContextImpl.checkE1Params */
    class S82Stm: public Statemachine {
    public:
        class S82Top: public TopState{ using TThisState = S82Top;
            public: static TopState* GetInstance() { static TThisState singleInstance; return &singleInstance; }
        };
        class InitPt: public Pseudostate<InitPt>{};
        class S821: public S82Top { using TThisState = S821; using TSuperState = S82Top;
            public: static TopState* GetInstance() { static TThisState singleInstance; return &singleInstance; }
            virtual void Entry( Context* pContext, Statemachine* pStm ){
                if( pStm->IsEnterable<TThisState>() ){
                    std::cout << typeid(this).name() << " entry\n";
                }
            }
            virtual bool EventProc( Context* pContext, Statemachine* pStm, EventId nEventId, EventParams* pParams ){
                bool bResult = false;
                pStm->m_pSourceState = TThisState::GetInstance();
                return bResult;
            }
            virtual void Exit(Context* pContext, Statemachine* pStm) {
                if (pStm->IsExitable<TThisState>()) {
                    std::cout << typeid(this).name() << " exit\n";
                }
            }
        };
        class S822: public S82Top { using TThisState = S822; using TSuperState = S82Top;
            public: static TopState* GetInstance() { static TThisState singleInstance; return &singleInstance; }
            virtual void Entry( Context* pContext, Statemachine* pStm ){
                if( pStm->IsEnterable<TThisState>() ){
                    std::cout << typeid(this).name() << " entry\n";
                }
            }
            virtual bool EventProc( Context* pContext, Statemachine* pStm, EventId nEventId, EventParams* pParams ){
                bool bResult = false;
                pStm->m_pSourceState = TThisState::GetInstance();
                switch( nEventId ){
                case E1:{
                    E1Params* e = ( E1Params* )pParams;
                    pStm->BgnTrans( pContext, S821::GetInstance() );
                    pStm->EndTrans( pContext );
                    bResult = true;
                } break;
                default: break;
                }
                return bResult;
            }
            virtual void Exit(Context* pContext, Statemachine* pStm) {
                if (pStm->IsExitable<TThisState>()) {
                    std::cout << typeid(this).name() << " exit\n";
                }
            }
        };
        virtual bool DefaultTrans( Context* pContext ){
            bool bResult = false;
            Statemachine* pStm = this;
            do {
                if (m_pCurrentState == S82Top::GetInstance() && m_pPseudostate == S82Stm::InitPt::GetInstance()) {
                    pStm->BgnTrans( pContext, S822::GetInstance() );
                    pStm->EndTrans( pContext );
                    bResult = true;
                } else if (m_pCurrentState != m_pPseudostate && dynamic_cast<S82Top*>(m_pPseudostate) != NULL) {
                    pStm->BgnTrans( pContext, dynamic_cast<TopState*>(m_pPseudostate) );
                    pStm->EndTrans( pContext );
                    bResult = true;
                } else {
                }
            } while (false);
            return bResult;
        }
        virtual bool Reset(Context* pContext, Statemachine* pParentStm, StateBase* pEntryPoint) {
            m_pParentStm = pParentStm;
            if (pEntryPoint == null) {
                if (IsFinished()) {
                    m_pPseudostate = InitPt::GetInstance();
                }
            } else {
                if (IsFinished()) {
                    m_pPseudostate = pEntryPoint;
                    return false;
                } else {
                    m_pPseudostate = pEntryPoint;
                }                    
            }
            if (pEntryPoint != null) {
            }
            return RunToCompletion(pContext);
        }
        virtual bool EventProc(Context* pContext, int nEventId, EventParams* pParams){
            bool bResult = false;
            m_pLCAState = TopState::GetInstance();
            bResult = m_pCurrentState->EventProc(pContext, this, nEventId, pParams);
            RunToCompletion(pContext);
            return bResult;
        }
        template<class TCompositeState = TopState>
        bool IsInRecur() {
            if (IsIn<TCompositeState>()) { return true; }
            return false;
        }
        virtual bool Abort(Context* pContext) {
            m_pSourceState = S82Top::GetInstance();
            BgnTrans(pContext, S82Top::GetInstance());
            EndTrans(pContext);
            return true;
        }
        virtual bool IsFinished() {
            return m_pCurrentState == S82Top::GetInstance() && m_pCurrentState == m_pPseudostate;
        }
        S82Stm(): Statemachine(S82Top::GetInstance(), S82Top::GetInstance()) {}
    };
    class S83Stm: public Statemachine {
    public:
        class S83Top: public TopState{ using TThisState = S83Top;
            public: static TopState* GetInstance() { static TThisState singleInstance; return &singleInstance; }
        };
        class InitPt: public Pseudostate<InitPt>{};
        class S831: public S83Top { using TThisState = S831; using TSuperState = S83Top;
            public: static TopState* GetInstance() { static TThisState singleInstance; return &singleInstance; }
            virtual void Entry( Context* pContext, Statemachine* pStm ){
                if( pStm->IsEnterable<TThisState>() ){
                    std::cout << typeid(this).name() << " entry\n";
                }
            }
            virtual bool EventProc( Context* pContext, Statemachine* pStm, EventId nEventId, EventParams* pParams ){
                bool bResult = false;
                pStm->m_pSourceState = TThisState::GetInstance();
                return bResult;
            }
            virtual void Exit(Context* pContext, Statemachine* pStm) {
                if (pStm->IsExitable<TThisState>()) {
                    std::cout << typeid(this).name() << " exit\n";
                }
            }
        };
        class S832: public S83Top { using TThisState = S832; using TSuperState = S83Top;
            public: static TopState* GetInstance() { static TThisState singleInstance; return &singleInstance; }
            virtual void Entry( Context* pContext, Statemachine* pStm ){
                if( pStm->IsEnterable<TThisState>() ){
                    std::cout << typeid(this).name() << " entry\n";
                }
            }
            virtual bool EventProc( Context* pContext, Statemachine* pStm, EventId nEventId, EventParams* pParams ){
                bool bResult = false;
                pStm->m_pSourceState = TThisState::GetInstance();
                return bResult;
            }
            virtual void Exit(Context* pContext, Statemachine* pStm) {
                if (pStm->IsExitable<TThisState>()) {
                    std::cout << typeid(this).name() << " exit\n";
                }
            }
        };
        virtual bool DefaultTrans( Context* pContext ){
            bool bResult = false;
            Statemachine* pStm = this;
            do {
                if (m_pCurrentState == S83Top::GetInstance() && m_pPseudostate == S83Stm::InitPt::GetInstance()) {
                    pStm->BgnTrans( pContext, S831::GetInstance() );
                    pStm->EndTrans( pContext );
                    bResult = true;
                } else if (m_pCurrentState != m_pPseudostate && dynamic_cast<S83Top*>(m_pPseudostate) != NULL) {
                    pStm->BgnTrans( pContext, dynamic_cast<TopState*>(m_pPseudostate) );
                    pStm->EndTrans( pContext );
                    bResult = true;
                } else {
                }
            } while (false);
            return bResult;
        }
        virtual bool Reset(Context* pContext, Statemachine* pParentStm, StateBase* pEntryPoint) {
            m_pParentStm = pParentStm;
            if (pEntryPoint == null) {
                if (IsFinished()) {
                    m_pPseudostate = InitPt::GetInstance();
                }
            } else {
                if (IsFinished()) {
                    m_pPseudostate = pEntryPoint;
                    return false;
                } else {
                    m_pPseudostate = pEntryPoint;
                }                    
            }
            if (pEntryPoint != null) {
            }
            return RunToCompletion(pContext);
        }
        virtual bool EventProc(Context* pContext, int nEventId, EventParams* pParams){
            bool bResult = false;
            m_pLCAState = TopState::GetInstance();
            bResult = m_pCurrentState->EventProc(pContext, this, nEventId, pParams);
            RunToCompletion(pContext);
            return bResult;
        }
        template<class TCompositeState = TopState>
        bool IsInRecur() {
            if (IsIn<TCompositeState>()) { return true; }
            return false;
        }
        virtual bool Abort(Context* pContext) {
            m_pSourceState = S83Top::GetInstance();
            BgnTrans(pContext, S83Top::GetInstance());
            EndTrans(pContext);
            return true;
        }
        virtual bool IsFinished() {
            return m_pCurrentState == S83Top::GetInstance() && m_pCurrentState == m_pPseudostate;
        }
        S83Stm(): Statemachine(S83Top::GetInstance(), S83Top::GetInstance()) {}
    };
    class SharedStm: public Statemachine {
    public:
        class SharedTop: public TopState{ using TThisState = SharedTop;
            public: static TopState* GetInstance() { static TThisState singleInstance; return &singleInstance; }
        };
        class InitPt: public Pseudostate<InitPt>{};
        class Entry1: public Pseudostate<Entry1>{};
        class Exit1: public Pseudostate<Exit1>{};
        class Shared1: public SharedTop { using TThisState = Shared1; using TSuperState = SharedTop;
            public: static TopState* GetInstance() { static TThisState singleInstance; return &singleInstance; }
            virtual void Entry( Context* pContext, Statemachine* pStm ){
                if( pStm->IsEnterable<TThisState>() ){
                    std::cout << typeid(this).name() << " entry\n";
                }
            }
            virtual bool EventProc( Context* pContext, Statemachine* pStm, EventId nEventId, EventParams* pParams ){
                bool bResult = false;
                pStm->m_pSourceState = TThisState::GetInstance();
                switch( nEventId ){
                case E0:{
                    pStm->BgnTrans( pContext, Shared2::GetInstance() );
                    pStm->EndTrans( pContext );
                    bResult = true;
                } break;
                default: break;
                }
                return bResult;
            }
            virtual void Exit(Context* pContext, Statemachine* pStm) {
                if (pStm->IsExitable<TThisState>()) {
                    std::cout << typeid(this).name() << " exit\n";
                }
            }
        };
        class Shared2: public SharedTop { using TThisState = Shared2; using TSuperState = SharedTop;
            public: static TopState* GetInstance() { static TThisState singleInstance; return &singleInstance; }
            virtual void Entry( Context* pContext, Statemachine* pStm ){
                if( pStm->IsEnterable<TThisState>() ){
                    std::cout << typeid(this).name() << " entry\n";
                }
            }
            virtual bool EventProc( Context* pContext, Statemachine* pStm, EventId nEventId, EventParams* pParams ){
                bool bResult = false;
                pStm->m_pSourceState = TThisState::GetInstance();
                switch( nEventId ){
                case E2:{
                    pStm->BgnTrans( pContext, SharedTop::GetInstance() );
                    pStm->EndTrans( pContext );
                    bResult = true;
                } break;
                case E3:{
                    pStm->BgnTrans( pContext, SharedTop::GetInstance() );
                    pStm->m_pParentStm->m_pPseudostate = SharedStm::Exit1::GetInstance();
                    pStm->EndTrans( pContext );
                    bResult = true;
                } break;
                default: break;
                }
                return bResult;
            }
            virtual void Exit(Context* pContext, Statemachine* pStm) {
                if (pStm->IsExitable<TThisState>()) {
                    std::cout << typeid(this).name() << " exit\n";
                }
            }
        };
        virtual bool DefaultTrans( Context* pContext ){
            bool bResult = false;
            Statemachine* pStm = this;
            do {
                if (m_pCurrentState == SharedTop::GetInstance() && m_pPseudostate == SharedStm::InitPt::GetInstance()) {
                    pStm->BgnTrans( pContext, Shared1::GetInstance() );
                    pStm->EndTrans( pContext );
                    bResult = true;
                } else if (m_pPseudostate == SharedStm::Entry1::GetInstance()) {
                    pStm->BgnTrans( pContext, Shared1::GetInstance() );
                    pStm->EndTrans( pContext );
                    bResult = true;
                } else if (m_pCurrentState != m_pPseudostate && dynamic_cast<SharedTop*>(m_pPseudostate) != NULL) {
                    pStm->BgnTrans( pContext, dynamic_cast<TopState*>(m_pPseudostate) );
                    pStm->EndTrans( pContext );
                    bResult = true;
                } else {
                }
            } while (false);
            return bResult;
        }
        virtual bool Reset(Context* pContext, Statemachine* pParentStm, StateBase* pEntryPoint) {
            m_pParentStm = pParentStm;
            if (pEntryPoint == null) {
                if (IsFinished()) {
                    m_pPseudostate = InitPt::GetInstance();
                }
            } else {
                if (IsFinished()) {
                    m_pPseudostate = pEntryPoint;
                    return false;
                } else {
                    m_pPseudostate = pEntryPoint;
                }                    
            }
            if (pEntryPoint != null) {
            }
            return RunToCompletion(pContext);
        }
        virtual bool EventProc(Context* pContext, int nEventId, EventParams* pParams){
            bool bResult = false;
            m_pLCAState = TopState::GetInstance();
            bResult = m_pCurrentState->EventProc(pContext, this, nEventId, pParams);
            RunToCompletion(pContext);
            return bResult;
        }
        template<class TCompositeState = TopState>
        bool IsInRecur() {
            if (IsIn<TCompositeState>()) { return true; }
            return false;
        }
        virtual bool Abort(Context* pContext) {
            m_pSourceState = SharedTop::GetInstance();
            BgnTrans(pContext, SharedTop::GetInstance());
            EndTrans(pContext);
            return true;
        }
        virtual bool IsFinished() {
            return m_pCurrentState == SharedTop::GetInstance() && m_pCurrentState == m_pPseudostate;
        }
        SharedStm(): Statemachine(SharedTop::GetInstance(), SharedTop::GetInstance()) {}
    };
    class MainStm: public Statemachine {
    public:
        class MainTop: public TopState{ using TThisState = MainTop;
            public: static TopState* GetInstance() { static TThisState singleInstance; return &singleInstance; }
        };
        SharedStm m_S6SharedStm;                                
        S82Stm m_S82S82Stm;                                     
        S83Stm m_S83S83Stm;                                     
        SharedStm m_S9SharedStm;                                
        TopState* m_pS4History;
        TopState* m_pS7History;
        class InitPt0: public Pseudostate<InitPt0>{};
        class InitPt1: public Pseudostate<InitPt1>{};
        class InitPt2: public Pseudostate<InitPt2>{};
        class Junction: public Pseudostate<Junction>{};
        class InitPt4: public Pseudostate<InitPt4>{};
        class InitPt3: public Pseudostate<InitPt3>{};
        class S1: public MainTop { using TThisState = S1; using TSuperState = MainTop;
            public: static TopState* GetInstance() { static TThisState singleInstance; return &singleInstance; }
            virtual void Entry( Context* pContext, Statemachine* pStm ){
                if( pStm->IsEnterable<TThisState>() ){
                    std::cout << typeid(this).name() << " entry\n";
                }
            }
            virtual bool EventProc( Context* pContext, Statemachine* pStm, EventId nEventId, EventParams* pParams ){
                bool bResult = false;
                pStm->m_pSourceState = TThisState::GetInstance();
                switch( nEventId ){
                case E1:{
                    E1Params* e = ( E1Params* )pParams;
                    if (checkE1Params(e)) {
                        pStm->BgnTrans( pContext, S2::GetInstance(), InitPt1::GetInstance() );
                        pStm->EndTrans( pContext );
                        bResult = true;
                    }
                } break;
                case E2:{
                    int n = InputValue("Enter condition1: ");
                    if (n == 0) {
                        if (( ( MainStm* )pStm )->m_pS4History) {
                            pStm->BgnTrans( pContext, ( ( MainStm* )pStm )->m_pS4History );
                            DisplayMsg("Do an action4");
                            pStm->EndTrans( pContext );
                            bResult = true;
                            break;
                        }
                        pStm->BgnTrans( pContext, S4::GetInstance(), InitPt2::GetInstance() );
                        DisplayMsg("Do an action4");
                        pStm->EndTrans( pContext );
                        bResult = true;
                    } else if (InputValue("Enter condition2: ") == 1) {
                        pStm->BgnTrans( pContext, S5::GetInstance() );
                        DisplayMsg("Do an action1");
                        DisplayMsg("Do an action2");
                        pStm->EndTrans( pContext );
                        bResult = true;
                    } else {
                        pStm->BgnTrans( pContext, S7::GetInstance(), InitPt3::GetInstance() );
                        DisplayMsg("Do an action1");
                        DisplayMsg("Do an action3");
                        pStm->EndTrans( pContext );
                        bResult = true;
                    }
                } break;
                default: break;
                }
                return bResult;
            }
            virtual void Exit(Context* pContext, Statemachine* pStm) {
                if (pStm->IsExitable<TThisState>()) {
                    std::cout << typeid(this).name() << " exit\n";
                }
            }
        };
        class S2: public MainTop { using TThisState = S2; using TSuperState = MainTop;
            public: static TopState* GetInstance() { static TThisState singleInstance; return &singleInstance; }
            virtual void Entry( Context* pContext, Statemachine* pStm ){
                if( pStm->IsEnterable<TThisState>() ){
                    std::cout << typeid(this).name() << " entry\n";
                    DisplayMsg("Do something");
                }
            }
            virtual bool EventProc( Context* pContext, Statemachine* pStm, EventId nEventId, EventParams* pParams ){
                bool bResult = false;
                pStm->m_pSourceState = TThisState::GetInstance();
                switch( nEventId ){
                case E2:{
                    pStm->BgnTrans( pContext, S3::GetInstance() );
                    pStm->EndTrans( pContext );
                    bResult = true;
                } break;
                case E3:{
                    if (( ( MainStm* )pStm )->m_pS4History) {
                        pStm->BgnTrans( pContext, ( ( MainStm* )pStm )->m_pS4History );
                        pStm->EndTrans( pContext );
                        bResult = true;
                        break;
                    }
                    pStm->BgnTrans( pContext, S4::GetInstance(), InitPt2::GetInstance() );
                    pStm->EndTrans( pContext );
                    bResult = true;
                } break;
                default: break;
                }
                return bResult;
            }
            virtual void Exit(Context* pContext, Statemachine* pStm) {
                if (pStm->IsExitable<TThisState>()) {
                    DisplayMsg("Do another thing");
                    std::cout << typeid(this).name() << " exit\n";
                }
            }
        };
        class S21: public S2 { using TThisState = S21; using TSuperState = S2;
            public: static TopState* GetInstance() { static TThisState singleInstance; return &singleInstance; }
            virtual void Entry( Context* pContext, Statemachine* pStm ){
                if( pStm->IsEnterable<TThisState>() ){
                    TSuperState::Entry( pContext, pStm );
                    std::cout << typeid(this).name() << " entry\n";
                }
            }
            virtual bool EventProc( Context* pContext, Statemachine* pStm, EventId nEventId, EventParams* pParams ){
                bool bResult = false;
                pStm->m_pSourceState = TThisState::GetInstance();
                switch( nEventId ){
                case E0:{
                    pStm->BgnTrans( pContext, S22::GetInstance() );
                    pStm->EndTrans( pContext );
                    bResult = true;
                } break;
                case E1:{
                    E1Params* e = ( E1Params* )pParams;
                    pStm->BgnTrans( pContext, S3::GetInstance() );
                    pStm->EndTrans( pContext );
                    bResult = true;
                } break;
                default: break;
                }
                return bResult ? bResult : TSuperState::EventProc( pContext, pStm, nEventId, pParams );
            }
            virtual void Exit(Context* pContext, Statemachine* pStm) {
                if (pStm->IsExitable<TThisState>()) {
                    std::cout << typeid(this).name() << " exit\n";
                    TSuperState::Exit(pContext, pStm);
                }
            }
        };
        class S22: public S2 { using TThisState = S22; using TSuperState = S2;
            public: static TopState* GetInstance() { static TThisState singleInstance; return &singleInstance; }
            virtual void Entry( Context* pContext, Statemachine* pStm ){
                if( pStm->IsEnterable<TThisState>() ){
                    TSuperState::Entry( pContext, pStm );
                    std::cout << typeid(this).name() << " entry\n";
                }
            }
            virtual bool EventProc( Context* pContext, Statemachine* pStm, EventId nEventId, EventParams* pParams ){
                bool bResult = false;
                pStm->m_pSourceState = TThisState::GetInstance();
                switch( nEventId ){
                case E0:{
                    pStm->BgnTrans( pContext, S2::GetInstance() );
                    pStm->EndTrans( pContext );
                    bResult = true;
                } break;
                default: break;
                }
                return bResult ? bResult : TSuperState::EventProc( pContext, pStm, nEventId, pParams );
            }
            virtual void Exit(Context* pContext, Statemachine* pStm) {
                if (pStm->IsExitable<TThisState>()) {
                    std::cout << typeid(this).name() << " exit\n";
                    TSuperState::Exit(pContext, pStm);
                }
            }
        };
        class S3: public MainTop { using TThisState = S3; using TSuperState = MainTop;
            public: static TopState* GetInstance() { static TThisState singleInstance; return &singleInstance; }
            virtual void Entry( Context* pContext, Statemachine* pStm ){
                if( pStm->IsEnterable<TThisState>() ){
                    std::cout << typeid(this).name() << " entry\n";
                }
            }
            virtual bool EventProc( Context* pContext, Statemachine* pStm, EventId nEventId, EventParams* pParams ){
                bool bResult = false;
                pStm->m_pSourceState = TThisState::GetInstance();
                switch( nEventId ){
                case E0:{
                    pStm->BgnTrans( pContext, MainTop::GetInstance() );
                    pStm->m_pPseudostate = MainStm::Junction::GetInstance();
                    pStm->EndTrans( pContext );
                    bResult = true;
                } break;
                default: break;
                }
                return bResult;
            }
            virtual void Exit(Context* pContext, Statemachine* pStm) {
                if (pStm->IsExitable<TThisState>()) {
                    std::cout << typeid(this).name() << " exit\n";
                }
            }
        };
        class S4: public MainTop { using TThisState = S4; using TSuperState = MainTop;
            public: static TopState* GetInstance() { static TThisState singleInstance; return &singleInstance; }
            virtual void Entry( Context* pContext, Statemachine* pStm ){
                if( pStm->IsEnterable<TThisState>() ){
                    std::cout << typeid(this).name() << " entry\n";
                }
            }
            virtual bool EventProc( Context* pContext, Statemachine* pStm, EventId nEventId, EventParams* pParams ){
                bool bResult = false;
                pStm->m_pSourceState = TThisState::GetInstance();
                switch( nEventId ){
                case E2:{
                    pStm->m_bIsExternTrans = true;
                    pStm->BgnTrans( pContext, S42::GetInstance() );
                    pStm->EndTrans( pContext );
                    bResult = true;
                } break;
                default: break;
                }
                return bResult;
            }
            virtual void Exit(Context* pContext, Statemachine* pStm) {
                if (pStm->IsExitable<TThisState>()) {
                    std::cout << typeid(this).name() << " exit\n";
                }
            }
        };
        class S41: public S4 { using TThisState = S41; using TSuperState = S4;
            public: static TopState* GetInstance() { static TThisState singleInstance; return &singleInstance; }
            virtual void Entry( Context* pContext, Statemachine* pStm ){
                if( pStm->IsEnterable<TThisState>() ){
                    TSuperState::Entry( pContext, pStm );
                    std::cout << typeid(this).name() << " entry\n";
                    ((MainStm*)pStm)->m_pS4History = S41::GetInstance();
                }
            }
            virtual bool EventProc( Context* pContext, Statemachine* pStm, EventId nEventId, EventParams* pParams ){
                bool bResult = false;
                pStm->m_pSourceState = TThisState::GetInstance();
                switch( nEventId ){
                case E1:{
                    E1Params* e = ( E1Params* )pParams;
                    pStm->BgnTrans( pContext, S42::GetInstance() );
                    pStm->EndTrans( pContext );
                    bResult = true;
                } break;
                default: break;
                }
                return bResult ? bResult : TSuperState::EventProc( pContext, pStm, nEventId, pParams );
            }
            virtual void Exit(Context* pContext, Statemachine* pStm) {
                if (pStm->IsExitable<TThisState>()) {
                    std::cout << typeid(this).name() << " exit\n";
                    TSuperState::Exit(pContext, pStm);
                }
            }
        };
        class S42: public S4 { using TThisState = S42; using TSuperState = S4;
            public: static TopState* GetInstance() { static TThisState singleInstance; return &singleInstance; }
            virtual void Entry( Context* pContext, Statemachine* pStm ){
                if( pStm->IsEnterable<TThisState>() ){
                    TSuperState::Entry( pContext, pStm );
                    std::cout << typeid(this).name() << " entry\n";
                    ((MainStm*)pStm)->m_pS4History = S42::GetInstance();
                }
            }
            virtual bool EventProc( Context* pContext, Statemachine* pStm, EventId nEventId, EventParams* pParams ){
                bool bResult = false;
                pStm->m_pSourceState = TThisState::GetInstance();
                switch( nEventId ){
                case E1:{
                    E1Params* e = ( E1Params* )pParams;
                    pStm->BgnTrans( pContext, S4::GetInstance() );
                    ((MainStm*)pStm)->m_pS4History = S4::GetInstance();
                    pStm->EndTrans( pContext );
                    bResult = true;
                } break;
                default: break;
                }
                return bResult ? bResult : TSuperState::EventProc( pContext, pStm, nEventId, pParams );
            }
            virtual void Exit(Context* pContext, Statemachine* pStm) {
                if (pStm->IsExitable<TThisState>()) {
                    std::cout << typeid(this).name() << " exit\n";
                    TSuperState::Exit(pContext, pStm);
                }
            }
        };
        class S6: public MainTop { using TThisState = S6; using TSuperState = MainTop;
            public: static TopState* GetInstance() { static TThisState singleInstance; return &singleInstance; }
            virtual void Entry( Context* pContext, Statemachine* pStm ){
                if( pStm->IsEnterable<TThisState>() ){
                    std::cout << typeid(this).name() << " entry\n";
                    ((MainStm*)pStm)->m_S6SharedStm.Reset( pContext, pStm, nullptr );
                }
            }
            virtual bool EventProc( Context* pContext, Statemachine* pStm, EventId nEventId, EventParams* pParams ){
                bool bResult = false;
                pStm->m_pSourceState = TThisState::GetInstance();
                switch( nEventId ){
                case E3:{
                    pStm->BgnTrans( pContext, S9::GetInstance() );
                    pStm->EndTrans( pContext );
                    bResult = true;
                } break;
                case E4:{
                    if (( ( MainStm* )pStm )->m_pS4History) {
                        pStm->BgnTrans( pContext, ( ( MainStm* )pStm )->m_pS4History );
                        pStm->EndTrans( pContext );
                        bResult = true;
                        break;
                    }
                    pStm->BgnTrans( pContext, S4::GetInstance(), InitPt2::GetInstance() );
                    pStm->EndTrans( pContext );
                    bResult = true;
                } break;
                default: break;
                }
                return bResult;
            }
            virtual void Exit(Context* pContext, Statemachine* pStm) {
                if (pStm->IsExitable<TThisState>()) {
                    ((MainStm*)pStm)->m_S6SharedStm.Abort( pContext );
                    std::cout << typeid(this).name() << " exit\n";
                }
            }
        };
        class S8: public MainTop { using TThisState = S8; using TSuperState = MainTop;
            public: static TopState* GetInstance() { static TThisState singleInstance; return &singleInstance; }
            virtual void Entry( Context* pContext, Statemachine* pStm ){
                if( pStm->IsEnterable<TThisState>() ){
                    std::cout << typeid(this).name() << " entry\n";
                    ((MainStm*)pStm)->m_S82S82Stm.Reset( pContext, pStm, nullptr );
                    ((MainStm*)pStm)->m_S83S83Stm.Reset( pContext, pStm, nullptr );
                }
            }
            virtual bool EventProc( Context* pContext, Statemachine* pStm, EventId nEventId, EventParams* pParams ){
                bool bResult = false;
                pStm->m_pSourceState = TThisState::GetInstance();
                switch( nEventId ){
                case E4:{
                    pStm->BgnTrans( pContext, MainTop::GetInstance() );
                    pStm->EndTrans( pContext );
                    bResult = true;
                } break;
                case E5:{
                    if (( ( MainStm* )pStm )->m_pS7History) {
                        pStm->BgnTrans( pContext, ( ( MainStm* )pStm )->m_pS7History );
                        pStm->EndTrans( pContext );
                        bResult = true;
                        break;
                    }
                } break;
                default: break;
                }
                return bResult;
            }
            virtual void Exit(Context* pContext, Statemachine* pStm) {
                if (pStm->IsExitable<TThisState>()) {
                    ((MainStm*)pStm)->m_S82S82Stm.Abort( pContext );
                    ((MainStm*)pStm)->m_S83S83Stm.Abort( pContext );
                    std::cout << typeid(this).name() << " exit\n";
                }
            }
        };
        class S811: public S8 { using TThisState = S811; using TSuperState = S8;
            public: static TopState* GetInstance() { static TThisState singleInstance; return &singleInstance; }
            virtual void Entry( Context* pContext, Statemachine* pStm ){
                if( pStm->IsEnterable<TThisState>() ){
                    TSuperState::Entry( pContext, pStm );
                    std::cout << typeid(this).name() << " entry\n";
                }
            }
            virtual bool EventProc( Context* pContext, Statemachine* pStm, EventId nEventId, EventParams* pParams ){
                bool bResult = false;
                pStm->m_pSourceState = TThisState::GetInstance();
                switch( nEventId ){
                case E1:{
                    E1Params* e = ( E1Params* )pParams;
                    pStm->BgnTrans( pContext, S812::GetInstance() );
                    pStm->EndTrans( pContext );
                    bResult = true;
                } break;
                case E3:{
                    if (((ContextImpl*)pContext)->IsIn<S82Stm::S821>()
                 || ((ContextImpl*)pContext)->IsIn<S83Stm::S831>()) {
                        pStm->BgnTrans( pContext, S812::GetInstance() );
                        ((MainStm*)pStm)->m_S83S83Stm.Reset(pContext, pStm, S83Stm::S832::GetInstance());
                        pStm->EndTrans( pContext );
                        bResult = true;
                    }
                } break;
                default: break;
                }
                return bResult ? bResult : TSuperState::EventProc( pContext, pStm, nEventId, pParams );
            }
            virtual void Exit(Context* pContext, Statemachine* pStm) {
                if (pStm->IsExitable<TThisState>()) {
                    std::cout << typeid(this).name() << " exit\n";
                    TSuperState::Exit(pContext, pStm);
                }
            }
        };
        class S813: public S8 { using TThisState = S813; using TSuperState = S8;
            public: static TopState* GetInstance() { static TThisState singleInstance; return &singleInstance; }
            virtual void Entry( Context* pContext, Statemachine* pStm ){
                if( pStm->IsEnterable<TThisState>() ){
                    TSuperState::Entry( pContext, pStm );
                    std::cout << typeid(this).name() << " entry\n";
                }
            }
            virtual bool EventProc( Context* pContext, Statemachine* pStm, EventId nEventId, EventParams* pParams ){
                bool bResult = false;
                pStm->m_pSourceState = TThisState::GetInstance();
                switch( nEventId ){
                case E5:{
                    if (((ContextImpl*)pContext)->IsIn<S82Stm::S822>()) {
                        pStm->BgnTrans( pContext, S10::GetInstance() );
                        pStm->EndTrans( pContext );
                        bResult = true;
                    }
                } break;
                default: break;
                }
                return bResult ? bResult : TSuperState::EventProc( pContext, pStm, nEventId, pParams );
            }
            virtual void Exit(Context* pContext, Statemachine* pStm) {
                if (pStm->IsExitable<TThisState>()) {
                    std::cout << typeid(this).name() << " exit\n";
                    TSuperState::Exit(pContext, pStm);
                }
            }
        };
        class S812: public S8 { using TThisState = S812; using TSuperState = S8;
            public: static TopState* GetInstance() { static TThisState singleInstance; return &singleInstance; }
            virtual void Entry( Context* pContext, Statemachine* pStm ){
                if( pStm->IsEnterable<TThisState>() ){
                    TSuperState::Entry( pContext, pStm );
                    std::cout << typeid(this).name() << " entry\n";
                }
            }
            virtual bool EventProc( Context* pContext, Statemachine* pStm, EventId nEventId, EventParams* pParams ){
                bool bResult = false;
                pStm->m_pSourceState = TThisState::GetInstance();
                switch( nEventId ){
                case E1:{
                    E1Params* e = ( E1Params* )pParams;
                    if (((ContextImpl*)pContext)->IsIn<S82Stm::S821>()) {
                        pStm->BgnTrans( pContext, S813::GetInstance() );
                        ((MainStm*)pStm)->m_S82S82Stm.Reset(pContext, pStm, S82Stm::S822::GetInstance());
                        pStm->EndTrans( pContext );
                        bResult = true;
                    }
                } break;
                default: break;
                }
                return bResult ? bResult : TSuperState::EventProc( pContext, pStm, nEventId, pParams );
            }
            virtual void Exit(Context* pContext, Statemachine* pStm) {
                if (pStm->IsExitable<TThisState>()) {
                    std::cout << typeid(this).name() << " exit\n";
                    TSuperState::Exit(pContext, pStm);
                }
            }
        };
        class S7: public MainTop { using TThisState = S7; using TSuperState = MainTop;
            public: static TopState* GetInstance() { static TThisState singleInstance; return &singleInstance; }
            virtual void Entry( Context* pContext, Statemachine* pStm ){
                if( pStm->IsEnterable<TThisState>() ){
                    std::cout << typeid(this).name() << " entry\n";
                }
            }
            virtual bool EventProc( Context* pContext, Statemachine* pStm, EventId nEventId, EventParams* pParams ){
                bool bResult = false;
                pStm->m_pSourceState = TThisState::GetInstance();
                switch( nEventId ){
                case E1:{
                    E1Params* e = ( E1Params* )pParams;
                    pStm->m_bIsExternTrans = true;
                    pStm->BgnTrans( pContext, S71::GetInstance() );
                    pStm->EndTrans( pContext );
                    bResult = true;
                } break;
                case E2:{
                    pStm->BgnTrans( pContext, S72::GetInstance() );
                    pStm->EndTrans( pContext );
                    bResult = true;
                } break;
                case E3:{
                    pStm->BgnTrans( pContext, S8::GetInstance(), InitPt4::GetInstance() );
                    ((MainStm*)pStm)->m_S83S83Stm.Reset(pContext, pStm, S83Stm::S831::GetInstance());
                    ((MainStm*)pStm)->m_S82S82Stm.Reset(pContext, pStm, S82Stm::S821::GetInstance());
                    pStm->EndTrans( pContext );
                    bResult = true;
                } break;
                default: break;
                }
                return bResult;
            }
            virtual void Exit(Context* pContext, Statemachine* pStm) {
                if (pStm->IsExitable<TThisState>()) {
                    std::cout << typeid(this).name() << " exit\n";
                }
            }
        };
        class S71: public S7 { using TThisState = S71; using TSuperState = S7;
            public: static TopState* GetInstance() { static TThisState singleInstance; return &singleInstance; }
            virtual void Entry( Context* pContext, Statemachine* pStm ){
                if( pStm->IsEnterable<TThisState>() ){
                    TSuperState::Entry( pContext, pStm );
                    std::cout << typeid(this).name() << " entry\n";
                    ((MainStm*)pStm)->m_pS7History = S71::GetInstance();
                }
            }
            virtual bool EventProc( Context* pContext, Statemachine* pStm, EventId nEventId, EventParams* pParams ){
                bool bResult = false;
                pStm->m_pSourceState = TThisState::GetInstance();
                return bResult ? bResult : TSuperState::EventProc( pContext, pStm, nEventId, pParams );
            }
            virtual void Exit(Context* pContext, Statemachine* pStm) {
                if (pStm->IsExitable<TThisState>()) {
                    std::cout << typeid(this).name() << " exit\n";
                    TSuperState::Exit(pContext, pStm);
                }
            }
        };
        class S72: public S7 { using TThisState = S72; using TSuperState = S7;
            public: static TopState* GetInstance() { static TThisState singleInstance; return &singleInstance; }
            virtual void Entry( Context* pContext, Statemachine* pStm ){
                if( pStm->IsEnterable<TThisState>() ){
                    TSuperState::Entry( pContext, pStm );
                    std::cout << typeid(this).name() << " entry\n";
                    ((MainStm*)pStm)->m_pS7History = S72::GetInstance();
                }
            }
            virtual bool EventProc( Context* pContext, Statemachine* pStm, EventId nEventId, EventParams* pParams ){
                bool bResult = false;
                pStm->m_pSourceState = TThisState::GetInstance();
                return bResult ? bResult : TSuperState::EventProc( pContext, pStm, nEventId, pParams );
            }
            virtual void Exit(Context* pContext, Statemachine* pStm) {
                if (pStm->IsExitable<TThisState>()) {
                    std::cout << typeid(this).name() << " exit\n";
                    TSuperState::Exit(pContext, pStm);
                }
            }
        };
        class S10: public MainTop { using TThisState = S10; using TSuperState = MainTop;
            public: static TopState* GetInstance() { static TThisState singleInstance; return &singleInstance; }
            virtual void Entry( Context* pContext, Statemachine* pStm ){
                if( pStm->IsEnterable<TThisState>() ){
                    std::cout << typeid(this).name() << " entry\n";
                }
            }
            virtual bool EventProc( Context* pContext, Statemachine* pStm, EventId nEventId, EventParams* pParams ){
                bool bResult = false;
                pStm->m_pSourceState = TThisState::GetInstance();
                switch( nEventId ){
                case E1:{
                    E1Params* e = ( E1Params* )pParams;
                    pStm->BgnTrans( pContext, MainTop::GetInstance() );
                    pStm->EndTrans( pContext );
                    bResult = true;
                } break;
                case E2:{
                    pStm->BgnTrans( pContext, S8::GetInstance(), InitPt4::GetInstance() );
                    ((MainStm*)pStm)->m_S83S83Stm.Reset(pContext, pStm, S83Stm::S832::GetInstance());
                    pStm->EndTrans( pContext );
                    bResult = true;
                } break;
                default: break;
                }
                return bResult;
            }
            virtual void Exit(Context* pContext, Statemachine* pStm) {
                if (pStm->IsExitable<TThisState>()) {
                    std::cout << typeid(this).name() << " exit\n";
                }
            }
        };
        class S5: public MainTop { using TThisState = S5; using TSuperState = MainTop;
            public: static TopState* GetInstance() { static TThisState singleInstance; return &singleInstance; }
            virtual void Entry( Context* pContext, Statemachine* pStm ){
                if( pStm->IsEnterable<TThisState>() ){
                    std::cout << typeid(this).name() << " entry\n";
                }
            }
            virtual bool EventProc( Context* pContext, Statemachine* pStm, EventId nEventId, EventParams* pParams ){
                bool bResult = false;
                pStm->m_pSourceState = TThisState::GetInstance();
                switch( nEventId ){
                case E1:{
                    E1Params* e = ( E1Params* )pParams;
                    pStm->m_bIsExternTrans = true;
                    pStm->BgnTrans( pContext, S5::GetInstance() );
                    pStm->EndTrans( pContext );
                    bResult = true;
                } break;
                case E2:{
                    int n = InputValue("Enter condition1: ");
                    if (n == 0) {
                        pStm->BgnTrans( pContext, S41::GetInstance() );
                        pStm->EndTrans( pContext );
                        bResult = true;
                    } else if (n == 1) {
                        pStm->BgnTrans( pContext, S8::GetInstance(), InitPt4::GetInstance() );
                        pStm->EndTrans( pContext );
                        bResult = true;
                    } else {
                        pStm->BgnTrans( pContext, S6::GetInstance() );
                        ((MainStm*)pStm)->m_S6SharedStm.Reset(pContext, pStm, SharedStm::Entry1::GetInstance());
                        pStm->EndTrans( pContext );
                        bResult = true;
                    }
                } break;
                default: break;
                }
                return bResult;
            }
            virtual void Exit(Context* pContext, Statemachine* pStm) {
                if (pStm->IsExitable<TThisState>()) {
                    std::cout << typeid(this).name() << " exit\n";
                }
            }
        };
        class S9: public MainTop { using TThisState = S9; using TSuperState = MainTop;
            public: static TopState* GetInstance() { static TThisState singleInstance; return &singleInstance; }
            virtual void Entry( Context* pContext, Statemachine* pStm ){
                if( pStm->IsEnterable<TThisState>() ){
                    std::cout << typeid(this).name() << " entry\n";
                    ((MainStm*)pStm)->m_S9SharedStm.Reset( pContext, pStm, nullptr );
                }
            }
            virtual bool EventProc( Context* pContext, Statemachine* pStm, EventId nEventId, EventParams* pParams ){
                bool bResult = false;
                pStm->m_pSourceState = TThisState::GetInstance();
                return bResult;
            }
            virtual void Exit(Context* pContext, Statemachine* pStm) {
                if (pStm->IsExitable<TThisState>()) {
                    ((MainStm*)pStm)->m_S9SharedStm.Abort( pContext );
                    std::cout << typeid(this).name() << " exit\n";
                }
            }
        };
        virtual bool DefaultTrans( Context* pContext ){
            bool bResult = false;
            Statemachine* pStm = this;
            bResult |= m_S6SharedStm.DefaultTrans( pContext );
            bResult |= m_S82S82Stm.DefaultTrans( pContext );
            bResult |= m_S83S83Stm.DefaultTrans( pContext );
            bResult |= m_S9SharedStm.DefaultTrans( pContext );
            do {
                if (m_pCurrentState == MainTop::GetInstance() && m_pPseudostate == MainStm::InitPt0::GetInstance()) {
                    pStm->BgnTrans( pContext, S1::GetInstance() );
                    pStm->EndTrans( pContext );
                    bResult = true;
                } else if (m_pCurrentState == S2::GetInstance() && m_pPseudostate == MainStm::InitPt1::GetInstance()) {
                    pStm->BgnTrans( pContext, S21::GetInstance() );
                    pStm->EndTrans( pContext );
                    bResult = true;
                } else if (m_pPseudostate == MainStm::S4::GetInstance()) {
                    pStm->BgnTrans( pContext, MainTop::GetInstance() );
                    pStm->m_pPseudostate = MainStm::Junction::GetInstance();
                    pStm->EndTrans( pContext );
                    bResult = true;
                } else if (m_pCurrentState == S4::GetInstance() && m_pPseudostate == MainStm::InitPt2::GetInstance()) {
                    pStm->BgnTrans( pContext, S41::GetInstance() );
                    pStm->EndTrans( pContext );
                    bResult = true;
                } else if (m_pPseudostate == MainStm::Junction::GetInstance()) {
                    pStm->BgnTrans( pContext, S6::GetInstance() );
                    pStm->EndTrans( pContext );
                    bResult = true;
                } else if (m_pCurrentState == S6::GetInstance() && m_pPseudostate == SharedStm::Exit1::GetInstance()) {
                    pStm->BgnTrans( pContext, S9::GetInstance() );
                    pStm->EndTrans( pContext );
                    bResult = true;
                } else if (m_pCurrentState == S8::GetInstance() && m_pPseudostate == MainStm::InitPt4::GetInstance()) {
                    pStm->BgnTrans( pContext, S811::GetInstance() );
                    pStm->EndTrans( pContext );
                    bResult = true;
                } else if (m_pCurrentState == S7::GetInstance() && m_pPseudostate == MainStm::InitPt3::GetInstance()) {
                    pStm->BgnTrans( pContext, S71::GetInstance() );
                    pStm->EndTrans( pContext );
                    bResult = true;
                } else if (m_pPseudostate == MainStm::S9::GetInstance()) {
                    if( !m_S9SharedStm.IsFinished() ){ break; }
                    pStm->BgnTrans( pContext, S10::GetInstance() );
                    pStm->EndTrans( pContext );
                    bResult = true;
                } else if (m_pCurrentState != m_pPseudostate && dynamic_cast<MainTop*>(m_pPseudostate) != NULL) {
                    pStm->BgnTrans( pContext, dynamic_cast<TopState*>(m_pPseudostate) );
                    pStm->EndTrans( pContext );
                    bResult = true;
                } else {
                }
            } while (false);
            return bResult;
        }
        virtual bool Reset(Context* pContext, Statemachine* pParentStm, StateBase* pEntryPoint) {
            m_pParentStm = pParentStm;
            if (pEntryPoint == null) {
                if (IsFinished()) {
                    m_pPseudostate = InitPt0::GetInstance();
                }
            } else {
                if (IsFinished()) {
                    m_pPseudostate = pEntryPoint;
                    return false;
                } else {
                    m_pPseudostate = pEntryPoint;
                }                    
            }
            if (pEntryPoint != null) {
                m_S6SharedStm.Reset( pContext, this, pEntryPoint );
                m_S82S82Stm.Reset( pContext, this, pEntryPoint );
                m_S83S83Stm.Reset( pContext, this, pEntryPoint );
                m_S9SharedStm.Reset( pContext, this, pEntryPoint );
            }
            return RunToCompletion(pContext);
        }
        virtual bool EventProc(Context* pContext, int nEventId, EventParams* pParams){
            bool bResult = false;
            m_pLCAState = TopState::GetInstance();
            bResult |= m_S6SharedStm.EventProc( pContext, nEventId, pParams );
            bResult |= m_S82S82Stm.EventProc( pContext, nEventId, pParams );
            bResult |= m_S83S83Stm.EventProc( pContext, nEventId, pParams );
            bResult |= m_S9SharedStm.EventProc( pContext, nEventId, pParams );
            bResult = m_pCurrentState->EventProc(pContext, this, nEventId, pParams);
            RunToCompletion(pContext);
            return bResult;
        }
        template<class TCompositeState = TopState>
        bool IsInRecur() {
            if (m_S6SharedStm.IsInRecur<TCompositeState>()) { return true; }
            if (m_S82S82Stm.IsInRecur<TCompositeState>()) { return true; }
            if (m_S83S83Stm.IsInRecur<TCompositeState>()) { return true; }
            if (m_S9SharedStm.IsInRecur<TCompositeState>()) { return true; }
            if (IsIn<TCompositeState>()) { return true; }
            return false;
        }
        virtual bool Abort(Context* pContext) {
            m_pSourceState = MainTop::GetInstance();
            BgnTrans(pContext, MainTop::GetInstance());
            EndTrans(pContext);
            return true;
        }
        virtual bool IsFinished() {
            return m_pCurrentState == MainTop::GetInstance() && m_pCurrentState == m_pPseudostate;
        }
        MainStm(): Statemachine(MainTop::GetInstance(), MainTop::GetInstance()) {}
    };
public:
    bool Start() {
        mainStm.Abort(this);
        return mainStm.Reset(this, nullptr, nullptr);
    }
    bool EventProc(EventId nEventId, EventParams* pParams) {
        return mainStm.EventProc(this, nEventId, pParams);
    }
    template<class TState>
    bool IsIn() {
        return mainStm.IsInRecur<TState>();
    }
    public:  ContextImpl(
        int _derivableAttribute,
        String _publicAttribute,
        int _privateAttribute,
        int _internalAttribute,
        int _readOnlyAttribute,
        std::vector<Composition*> &_aProtectedComposition
    ):  Context( _derivableAttribute, _publicAttribute, _privateAttribute, _internalAttribute, _readOnlyAttribute, _aProtectedComposition )
    {
    }                                                                                           
    MainStm mainStm;                                            
};
