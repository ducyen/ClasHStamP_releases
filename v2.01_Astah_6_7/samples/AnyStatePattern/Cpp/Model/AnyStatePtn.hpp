#pragma once
/* File generated by Đức's ClasHStamP */
#include "Generic/CommonInclude.h"
#include "Model/Context.hpp"                                    
#include "Generic/Statemachine.h"

class AnyStatePtn: public Context{
    public: enum _EventId {
        ev0,
        ev1,
        ev2,
        ev3,
        evNum
    };
    const std::string EventId_toString( _EventId value );
    friend class Main;
    class AnyStateStm: public Statemachine {
    public:
        class AnyStateTop: public TopState{ using TThisState = AnyStateTop;
            public: static TopState* GetInstance() { static TThisState singleInstance; return &singleInstance; }
        };
        class InitPt1: public Pseudostate<InitPt1>{};
        class InitPt2: public Pseudostate<InitPt2>{};
        class CompositeState: public AnyStateTop { using TThisState = CompositeState; using TSuperState = AnyStateTop;
            public: static TopState* GetInstance() { static TThisState singleInstance; return &singleInstance; }
            virtual void Entry( Context* pContext, Statemachine* pStm ){
                if( pStm->IsEnterable<TThisState>() ){
                    std::cout << typeid(this).name() << " entry\n";
                }
            }
            virtual bool EventProc( Context* pContext, Statemachine* pStm, EventId nEventId, EventParams* pParams ){
                bool bResult = false;
                pStm->m_pSourceState = TThisState::GetInstance();
                switch( nEventId ){
                case ev0:{
                    pStm->BgnTrans( pContext, State0::GetInstance() );
                    pStm->EndTrans( pContext );
                    bResult = true;
                } break;
                case ev1:{
                    pStm->m_bIsExternTrans = true;
                    pStm->BgnTrans( pContext, State1::GetInstance() );
                    pStm->EndTrans( pContext );
                    bResult = true;
                } break;
                case ev2:{
                    pStm->m_bIsExternTrans = true;
                    pStm->BgnTrans( pContext, State2::GetInstance() );
                    pStm->EndTrans( pContext );
                    bResult = true;
                } break;
                case ev3:{
                    pStm->BgnTrans( pContext, State3::GetInstance() );
                    pStm->EndTrans( pContext );
                    bResult = true;
                } break;
                default: break;
                }
                return bResult;
            }
            virtual void Exit(Context* pContext, Statemachine* pStm) {
                if (pStm->IsExitable<TThisState>()) {
                    std::cout << typeid(this).name() << " exit\n";
                }
            }
        };
        class State0: public CompositeState { using TThisState = State0; using TSuperState = CompositeState;
            public: static TopState* GetInstance() { static TThisState singleInstance; return &singleInstance; }
            virtual void Entry( Context* pContext, Statemachine* pStm ){
                if( pStm->IsEnterable<TThisState>() ){
                    TSuperState::Entry( pContext, pStm );
                    std::cout << typeid(this).name() << " entry\n";
                }
            }
            virtual bool EventProc( Context* pContext, Statemachine* pStm, EventId nEventId, EventParams* pParams ){
                bool bResult = false;
                pStm->m_pSourceState = TThisState::GetInstance();
                return bResult ? bResult : TSuperState::EventProc( pContext, pStm, nEventId, pParams );
            }
            virtual void Exit(Context* pContext, Statemachine* pStm) {
                if (pStm->IsExitable<TThisState>()) {
                    std::cout << typeid(this).name() << " exit\n";
                    TSuperState::Exit(pContext, pStm);
                }
            }
        };
        class State1: public CompositeState { using TThisState = State1; using TSuperState = CompositeState;
            public: static TopState* GetInstance() { static TThisState singleInstance; return &singleInstance; }
            virtual void Entry( Context* pContext, Statemachine* pStm ){
                if( pStm->IsEnterable<TThisState>() ){
                    TSuperState::Entry( pContext, pStm );
                    std::cout << typeid(this).name() << " entry\n";
                }
            }
            virtual bool EventProc( Context* pContext, Statemachine* pStm, EventId nEventId, EventParams* pParams ){
                bool bResult = false;
                pStm->m_pSourceState = TThisState::GetInstance();
                return bResult ? bResult : TSuperState::EventProc( pContext, pStm, nEventId, pParams );
            }
            virtual void Exit(Context* pContext, Statemachine* pStm) {
                if (pStm->IsExitable<TThisState>()) {
                    std::cout << typeid(this).name() << " exit\n";
                    TSuperState::Exit(pContext, pStm);
                }
            }
        };
        class State2: public CompositeState { using TThisState = State2; using TSuperState = CompositeState;
            public: static TopState* GetInstance() { static TThisState singleInstance; return &singleInstance; }
            virtual void Entry( Context* pContext, Statemachine* pStm ){
                if( pStm->IsEnterable<TThisState>() ){
                    TSuperState::Entry( pContext, pStm );
                    std::cout << typeid(this).name() << " entry\n";
                }
            }
            virtual bool EventProc( Context* pContext, Statemachine* pStm, EventId nEventId, EventParams* pParams ){
                bool bResult = false;
                pStm->m_pSourceState = TThisState::GetInstance();
                return bResult ? bResult : TSuperState::EventProc( pContext, pStm, nEventId, pParams );
            }
            virtual void Exit(Context* pContext, Statemachine* pStm) {
                if (pStm->IsExitable<TThisState>()) {
                    std::cout << typeid(this).name() << " exit\n";
                    TSuperState::Exit(pContext, pStm);
                }
            }
        };
        class State3: public CompositeState { using TThisState = State3; using TSuperState = CompositeState;
            public: static TopState* GetInstance() { static TThisState singleInstance; return &singleInstance; }
            virtual void Entry( Context* pContext, Statemachine* pStm ){
                if( pStm->IsEnterable<TThisState>() ){
                    TSuperState::Entry( pContext, pStm );
                    std::cout << typeid(this).name() << " entry\n";
                }
            }
            virtual bool EventProc( Context* pContext, Statemachine* pStm, EventId nEventId, EventParams* pParams ){
                bool bResult = false;
                pStm->m_pSourceState = TThisState::GetInstance();
                return bResult ? bResult : TSuperState::EventProc( pContext, pStm, nEventId, pParams );
            }
            virtual void Exit(Context* pContext, Statemachine* pStm) {
                if (pStm->IsExitable<TThisState>()) {
                    std::cout << typeid(this).name() << " exit\n";
                    TSuperState::Exit(pContext, pStm);
                }
            }
        };
        virtual bool DefaultTrans( Context* pContext ){
            bool bResult = false;
            Statemachine* pStm = this;
            do {
                if (m_pCurrentState == AnyStateTop::GetInstance() && m_pPseudostate == AnyStateStm::InitPt1::GetInstance()) {
                    pStm->BgnTrans( pContext, CompositeState::GetInstance(), InitPt2::GetInstance() );
                    pStm->EndTrans( pContext );
                    bResult = true;
                } else if (m_pCurrentState == CompositeState::GetInstance() && m_pPseudostate == AnyStateStm::InitPt2::GetInstance()) {
                    pStm->BgnTrans( pContext, State0::GetInstance() );
                    pStm->EndTrans( pContext );
                    bResult = true;
                } else if (m_pCurrentState != m_pPseudostate && dynamic_cast<AnyStateTop*>(m_pPseudostate) != NULL) {
                    pStm->BgnTrans( pContext, dynamic_cast<TopState*>(m_pPseudostate) );
                    pStm->EndTrans( pContext );
                    bResult = true;
                } else {
                }
            } while (false);
            return bResult;
        }
        virtual bool Reset(Context* pContext, Statemachine* pParentStm, StateBase* pEntryPoint) {
            m_pParentStm = pParentStm;
            if (pEntryPoint == null) {
                if (IsFinished()) {
                    m_pPseudostate = InitPt1::GetInstance();
                }
            } else {
                if (IsFinished()) {
                    m_pPseudostate = pEntryPoint;
                    return false;
                } else {
                    m_pPseudostate = pEntryPoint;
                }                    
            }
            return RunToCompletion(pContext);
        }
        virtual bool EventProc(Context* pContext, int nEventId, EventParams* pParams){
            bool bResult = false;
            m_pLCAState = TopState::GetInstance();
            bResult = m_pCurrentState->EventProc(pContext, this, nEventId, pParams);
            RunToCompletion(pContext);
            return bResult;
        }
        template<class TCompositeState = TopState>
        bool IsInRecur() {
            if (IsIn<TCompositeState>()) { return true; }
            return false;
        }
        virtual bool Abort(Context* pContext) {
            m_pSourceState = AnyStateTop::GetInstance();
            BgnTrans(pContext, AnyStateTop::GetInstance());
            EndTrans(pContext);
            return true;
        }
        virtual bool IsFinished() {
            return m_pCurrentState == AnyStateTop::GetInstance() && m_pCurrentState == m_pPseudostate;
        }
        AnyStateStm(): Statemachine(AnyStateTop::GetInstance(), AnyStateTop::GetInstance()) {}
    };
    public:  AnyStatePtn(
        int _attribute0
    ):  Context( _attribute0 )
    {
    }                                                                                           
    AnyStateStm mainStm;                                        
public:
    bool Start() {
        mainStm.Abort(this);
        return mainStm.Reset(this, nullptr, nullptr);
    }
    bool EventProc(EventId nEventId, EventParams* pParams) {
        return mainStm.EventProc(this, nEventId, pParams);
    }
    template<class TState>
    bool IsIn() {
        return mainStm.IsInRecur<TState>();
    }
};
