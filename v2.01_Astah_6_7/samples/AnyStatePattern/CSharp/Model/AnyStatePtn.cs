/* File generated by Đức's ClasHStamP */
using System;                                                   
using System.Collections.Generic;
using boolean = System.Boolean;
using Model;
using Base;
namespace Model {
    public  class AnyStatePtn: Context
    {
        public enum _EventId {
            ev0,
            ev1,
            ev2,
            ev3,
            AnyStatePtnEventNum
        };
        class AnyStateStm: Statemachine {
            public class AnyStateTop: TopState {
                private static TopState singleInstance = new AnyStateTop();
                public static new TopState GetInstance() { return singleInstance; }
            }
            public class InitPt1: Pseudostate<InitPt1>{};
            public class InitPt2: Pseudostate<InitPt2>{};
            public class CompositeState: AnyStateTop {
                private static TopState singleInstance = new CompositeState();
                public static new TopState GetInstance() { return singleInstance; }
                public override void Entry(Context pContext, Statemachine pStm){
                    if( pStm.IsEnterable(GetInstance()) ){
                        Console.WriteLine(GetInstance().GetType() + "entry");
                    }
                }
                public override bool EventProc( Context pContext, Statemachine pStm, int nEventId, EventParams pParams ){
                    bool bResult = false;
                    pStm.m_pSourceState = GetInstance();
                    switch( (_EventId)nEventId ){
                    case _EventId.ev0:{
                        pStm.BgnTrans( pContext, State0.GetInstance() );
                        pStm.EndTrans( pContext );
                        bResult = true;
                    } break;
                    case _EventId.ev1:{
                        pStm.m_bIsExternTrans = true;
                        pStm.BgnTrans( pContext, State1.GetInstance() );
                        pStm.EndTrans( pContext );
                        bResult = true;
                    } break;
                    case _EventId.ev2:{
                        pStm.m_bIsExternTrans = true;
                        pStm.BgnTrans( pContext, State2.GetInstance() );
                        pStm.EndTrans( pContext );
                        bResult = true;
                    } break;
                    case _EventId.ev3:{
                        pStm.BgnTrans( pContext, State3.GetInstance() );
                        pStm.EndTrans( pContext );
                        bResult = true;
                    } break;
                    default: break;
                    }
                    return bResult;
                }
                public override void Exit(Context pContext, Statemachine pStm) {
                    if (pStm.IsExitable(GetInstance())) {
                        Console.WriteLine(GetInstance().GetType() + "exit");
                    }
                }
            };
            public class State0: CompositeState {
                private static TopState singleInstance = new State0();
                public static new TopState GetInstance() { return singleInstance; }
                public override void Entry(Context pContext, Statemachine pStm){
                    if( pStm.IsEnterable(GetInstance()) ){
                        base.Entry( pContext, pStm );
                        Console.WriteLine(GetInstance().GetType() + "entry");
                    }
                }
                public override bool EventProc( Context pContext, Statemachine pStm, int nEventId, EventParams pParams ){
                    bool bResult = false;
                    pStm.m_pSourceState = GetInstance();
                    return bResult ? bResult : base.EventProc( pContext, pStm, nEventId, pParams );
                }
                public override void Exit(Context pContext, Statemachine pStm) {
                    if (pStm.IsExitable(GetInstance())) {
                        Console.WriteLine(GetInstance().GetType() + "exit");
                        base.Exit(pContext, pStm);
                    }
                }
            };
            public class State1: CompositeState {
                private static TopState singleInstance = new State1();
                public static new TopState GetInstance() { return singleInstance; }
                public override void Entry(Context pContext, Statemachine pStm){
                    if( pStm.IsEnterable(GetInstance()) ){
                        base.Entry( pContext, pStm );
                        Console.WriteLine(GetInstance().GetType() + "entry");
                    }
                }
                public override bool EventProc( Context pContext, Statemachine pStm, int nEventId, EventParams pParams ){
                    bool bResult = false;
                    pStm.m_pSourceState = GetInstance();
                    return bResult ? bResult : base.EventProc( pContext, pStm, nEventId, pParams );
                }
                public override void Exit(Context pContext, Statemachine pStm) {
                    if (pStm.IsExitable(GetInstance())) {
                        Console.WriteLine(GetInstance().GetType() + "exit");
                        base.Exit(pContext, pStm);
                    }
                }
            };
            public class State2: CompositeState {
                private static TopState singleInstance = new State2();
                public static new TopState GetInstance() { return singleInstance; }
                public override void Entry(Context pContext, Statemachine pStm){
                    if( pStm.IsEnterable(GetInstance()) ){
                        base.Entry( pContext, pStm );
                        Console.WriteLine(GetInstance().GetType() + "entry");
                    }
                }
                public override bool EventProc( Context pContext, Statemachine pStm, int nEventId, EventParams pParams ){
                    bool bResult = false;
                    pStm.m_pSourceState = GetInstance();
                    return bResult ? bResult : base.EventProc( pContext, pStm, nEventId, pParams );
                }
                public override void Exit(Context pContext, Statemachine pStm) {
                    if (pStm.IsExitable(GetInstance())) {
                        Console.WriteLine(GetInstance().GetType() + "exit");
                        base.Exit(pContext, pStm);
                    }
                }
            };
            public class State3: CompositeState {
                private static TopState singleInstance = new State3();
                public static new TopState GetInstance() { return singleInstance; }
                public override void Entry(Context pContext, Statemachine pStm){
                    if( pStm.IsEnterable(GetInstance()) ){
                        base.Entry( pContext, pStm );
                        Console.WriteLine(GetInstance().GetType() + "entry");
                    }
                }
                public override bool EventProc( Context pContext, Statemachine pStm, int nEventId, EventParams pParams ){
                    bool bResult = false;
                    pStm.m_pSourceState = GetInstance();
                    return bResult ? bResult : base.EventProc( pContext, pStm, nEventId, pParams );
                }
                public override void Exit(Context pContext, Statemachine pStm) {
                    if (pStm.IsExitable(GetInstance())) {
                        Console.WriteLine(GetInstance().GetType() + "exit");
                        base.Exit(pContext, pStm);
                    }
                }
            };
            public override bool DefaultTrans( Context pContext ){
                bool bResult = false;
                Statemachine pStm = this;
                do {
                    if (m_pCurrentState == AnyStateTop.GetInstance() && m_pPseudostate == AnyStateStm.InitPt1.GetInstance()) {
                        pStm.BgnTrans( pContext, CompositeState.GetInstance(), InitPt2.GetInstance() );
                        pStm.EndTrans( pContext );
                        bResult = true;
                    } else if (m_pCurrentState == CompositeState.GetInstance() && m_pPseudostate == AnyStateStm.InitPt2.GetInstance()) {
                        pStm.BgnTrans( pContext, State0.GetInstance() );
                        pStm.EndTrans( pContext );
                        bResult = true;
                    } else if (m_pCurrentState != m_pPseudostate && m_pPseudostate is AnyStateTop) {
                        pStm.BgnTrans( pContext, m_pPseudostate as TopState );
                        pStm.EndTrans( pContext );
                    } else {
                    }
                } while (false);
                return bResult;
            }
            public override bool Reset(Context pContext, Statemachine pParentStm, Pseudostate pEntryPoint) {
                m_pParentStm = pParentStm;
                if (pEntryPoint == null) {
                    if (IsFinished()) {
                        m_pPseudostate = InitPt1.GetInstance();
                    }
                } else {
                    if (IsFinished()) {
                        m_pPseudostate = pEntryPoint;
                        return false;
                    } else {
                        m_pPseudostate = pEntryPoint;
                    }                    
                }
                return RunToCompletion(pContext);
            }
            public override bool EventProc(Context pContext, int nEventId, EventParams pParams){
                bool bResult = false;
                m_pLCAState = TopState.GetInstance();
                bResult |= m_pCurrentState.EventProc(pContext, this, nEventId, pParams);
                RunToCompletion(pContext);
                return bResult;
            }
            public override bool IsIn(TopState pCompositeState) {
                if (base.IsIn(pCompositeState)) { return true; }
                return false;
            }
            public override bool Abort(Context pContext) {
                m_pSourceState = AnyStateTop.GetInstance();
                BgnTrans(pContext, AnyStateTop.GetInstance());
                EndTrans(pContext);
                return true;
            }
            public override bool IsFinished() {
                return m_pCurrentState == AnyStateTop.GetInstance() && m_pCurrentState == m_pPseudostate;
            }
            public AnyStateStm(): base(AnyStateTop.GetInstance(), AnyStateTop.GetInstance()) {}
        };
        public  AnyStatePtn(
            int _attribute0
        ):  base( _attribute0 )
        {
        }                                                                                       
        AnyStateStm mainStm = new AnyStateStm();                
        public bool Start() {
            mainStm.Abort(this);
            return mainStm.Reset(this, null, null);
        }
        public bool EventProc(int nEventId, EventParams pParams) {
            return mainStm.EventProc(this, nEventId, pParams);
        }
        public bool IsIn(TopState pState) {
            return mainStm.IsIn(pState);
        }
    }
}
