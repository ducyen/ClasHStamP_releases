#pragma once
/* File generated by Đức's ClasHStamP */
#include "Generic/CommonInclude.h"
#include "Model/Context.hpp"                                    
#include "Generic/Statemachine.h"

class ContextImpl: public Context{
    public: enum _EventId {
        E0,
        E1,
        E2,
        E3,
        E4,
        E5,
        evNum
    };
    const std::string EventId_toString( _EventId value );
    friend class AFriend;
    friend class Main;
    class S111Stm: public Statemachine {
    public:
        class S111Top: public TopState{ using TThisState = S111Top;
            public: static TopState* GetInstance() { static TThisState singleInstance; return &singleInstance; }
        };
        class Entry1: public Pseudostate<Entry1>{};
        class InitPt: public Pseudostate<InitPt>{};
        class S14: public S111Top { using TThisState = S14; using TSuperState = S111Top;
            public: static TopState* GetInstance() { static TThisState singleInstance; return &singleInstance; }
            virtual void Entry( Context* pContext, Statemachine* pStm ){
                if( pStm->IsEnterable<TThisState>() ){
                    std::cout << typeid(this).name() << " entry\n";
                }
            }
            virtual bool EventProc( Context* pContext, Statemachine* pStm, EventId nEventId, EventParams* pParams ){
                bool bResult = false;
                pStm->m_pSourceState = TThisState::GetInstance();
                switch( nEventId ){
                case E2:{
                    pStm->BgnTrans( pContext, S15::GetInstance() );
                    pStm->EndTrans( pContext );
                    bResult = true;
                } break;
                default: break;
                }
                return bResult;
            }
            virtual void Exit(Context* pContext, Statemachine* pStm) {
                if (pStm->IsExitable<TThisState>()) {
                    std::cout << typeid(this).name() << " exit\n";
                }
            }
        };
        class S15: public S111Top { using TThisState = S15; using TSuperState = S111Top;
            public: static TopState* GetInstance() { static TThisState singleInstance; return &singleInstance; }
            virtual void Entry( Context* pContext, Statemachine* pStm ){
                if( pStm->IsEnterable<TThisState>() ){
                    std::cout << typeid(this).name() << " entry\n";
                }
            }
            virtual bool EventProc( Context* pContext, Statemachine* pStm, EventId nEventId, EventParams* pParams ){
                bool bResult = false;
                pStm->m_pSourceState = TThisState::GetInstance();
                return bResult;
            }
            virtual void Exit(Context* pContext, Statemachine* pStm) {
                if (pStm->IsExitable<TThisState>()) {
                    std::cout << typeid(this).name() << " exit\n";
                }
            }
        };
        virtual bool DefaultTrans( Context* pContext ){
            bool bResult = false;
            Statemachine* pStm = this;
            do {
                if (m_pPseudostate == S111Stm::Entry1::GetInstance()) {
                    pStm->BgnTrans( pContext, S14::GetInstance() );
                    pStm->EndTrans( pContext );
                    bResult = true;
                } else if (m_pCurrentState == S111Top::GetInstance() && m_pPseudostate == S111Stm::InitPt::GetInstance()) {
                    pStm->BgnTrans( pContext, S15::GetInstance() );
                    pStm->EndTrans( pContext );
                    bResult = true;
                } else if (m_pCurrentState != m_pPseudostate && dynamic_cast<S111Top*>(m_pPseudostate) != NULL) {
                    pStm->BgnTrans( pContext, dynamic_cast<TopState*>(m_pPseudostate) );
                    pStm->EndTrans( pContext );
                    bResult = true;
                } else {
                }
            } while (false);
            return bResult;
        }
        virtual bool Reset(Context* pContext, Statemachine* pParentStm, StateBase* pEntryPoint) {
            m_pParentStm = pParentStm;
            if (pEntryPoint == null) {
                if (IsFinished()) {
                    m_pPseudostate = InitPt::GetInstance();
                }
            } else {
                if (IsFinished()) {
                    m_pPseudostate = pEntryPoint;
                    return false;
                } else {
                    m_pPseudostate = pEntryPoint;
                }                    
            }
            if (pEntryPoint != null) {
            }
            return RunToCompletion(pContext);
        }
        virtual bool EventProc(Context* pContext, int nEventId, EventParams* pParams){
            bool bResult = false;
            m_pLCAState = TopState::GetInstance();
            bResult = m_pCurrentState->EventProc(pContext, this, nEventId, pParams);
            RunToCompletion(pContext);
            return bResult;
        }
        template<class TCompositeState = TopState>
        bool IsInRecur() {
            if (IsIn<TCompositeState>()) { return true; }
            return false;
        }
        virtual bool Abort(Context* pContext) {
            m_pSourceState = S111Top::GetInstance();
            BgnTrans(pContext, S111Top::GetInstance());
            EndTrans(pContext);
            return true;
        }
        virtual bool IsFinished() {
            return m_pCurrentState == S111Top::GetInstance() && m_pCurrentState == m_pPseudostate;
        }
        S111Stm(): Statemachine(S111Top::GetInstance(), S111Top::GetInstance()) {}
    };
    class S112Stm: public Statemachine {
    public:
        class S112Top: public TopState{ using TThisState = S112Top;
            public: static TopState* GetInstance() { static TThisState singleInstance; return &singleInstance; }
        };
        class Entry1: public Pseudostate<Entry1>{};
        class InitPt: public Pseudostate<InitPt>{};
        class Entry2: public Pseudostate<Entry2>{};
        class S16: public S112Top { using TThisState = S16; using TSuperState = S112Top;
            public: static TopState* GetInstance() { static TThisState singleInstance; return &singleInstance; }
            virtual void Entry( Context* pContext, Statemachine* pStm ){
                if( pStm->IsEnterable<TThisState>() ){
                    std::cout << typeid(this).name() << " entry\n";
                }
            }
            virtual bool EventProc( Context* pContext, Statemachine* pStm, EventId nEventId, EventParams* pParams ){
                bool bResult = false;
                pStm->m_pSourceState = TThisState::GetInstance();
                switch( nEventId ){
                case E3:{
                    pStm->BgnTrans( pContext, S17::GetInstance() );
                    pStm->EndTrans( pContext );
                    bResult = true;
                } break;
                default: break;
                }
                return bResult;
            }
            virtual void Exit(Context* pContext, Statemachine* pStm) {
                if (pStm->IsExitable<TThisState>()) {
                    std::cout << typeid(this).name() << " exit\n";
                }
            }
        };
        class S17: public S112Top { using TThisState = S17; using TSuperState = S112Top;
            public: static TopState* GetInstance() { static TThisState singleInstance; return &singleInstance; }
            virtual void Entry( Context* pContext, Statemachine* pStm ){
                if( pStm->IsEnterable<TThisState>() ){
                    std::cout << typeid(this).name() << " entry\n";
                }
            }
            virtual bool EventProc( Context* pContext, Statemachine* pStm, EventId nEventId, EventParams* pParams ){
                bool bResult = false;
                pStm->m_pSourceState = TThisState::GetInstance();
                return bResult;
            }
            virtual void Exit(Context* pContext, Statemachine* pStm) {
                if (pStm->IsExitable<TThisState>()) {
                    std::cout << typeid(this).name() << " exit\n";
                }
            }
        };
        virtual bool DefaultTrans( Context* pContext ){
            bool bResult = false;
            Statemachine* pStm = this;
            do {
                if (m_pPseudostate == S112Stm::Entry1::GetInstance()) {
                    pStm->BgnTrans( pContext, S16::GetInstance() );
                    pStm->EndTrans( pContext );
                    bResult = true;
                } else if (m_pCurrentState == S112Top::GetInstance() && m_pPseudostate == S112Stm::InitPt::GetInstance()) {
                    pStm->BgnTrans( pContext, S16::GetInstance() );
                    pStm->EndTrans( pContext );
                    bResult = true;
                } else if (m_pPseudostate == S112Stm::Entry2::GetInstance()) {
                    pStm->BgnTrans( pContext, S17::GetInstance() );
                    pStm->EndTrans( pContext );
                    bResult = true;
                } else if (m_pCurrentState != m_pPseudostate && dynamic_cast<S112Top*>(m_pPseudostate) != NULL) {
                    pStm->BgnTrans( pContext, dynamic_cast<TopState*>(m_pPseudostate) );
                    pStm->EndTrans( pContext );
                    bResult = true;
                } else {
                }
            } while (false);
            return bResult;
        }
        virtual bool Reset(Context* pContext, Statemachine* pParentStm, StateBase* pEntryPoint) {
            m_pParentStm = pParentStm;
            if (pEntryPoint == null) {
                if (IsFinished()) {
                    m_pPseudostate = InitPt::GetInstance();
                }
            } else {
                if (IsFinished()) {
                    m_pPseudostate = pEntryPoint;
                    return false;
                } else {
                    m_pPseudostate = pEntryPoint;
                }                    
            }
            if (pEntryPoint != null) {
            }
            return RunToCompletion(pContext);
        }
        virtual bool EventProc(Context* pContext, int nEventId, EventParams* pParams){
            bool bResult = false;
            m_pLCAState = TopState::GetInstance();
            bResult = m_pCurrentState->EventProc(pContext, this, nEventId, pParams);
            RunToCompletion(pContext);
            return bResult;
        }
        template<class TCompositeState = TopState>
        bool IsInRecur() {
            if (IsIn<TCompositeState>()) { return true; }
            return false;
        }
        virtual bool Abort(Context* pContext) {
            m_pSourceState = S112Top::GetInstance();
            BgnTrans(pContext, S112Top::GetInstance());
            EndTrans(pContext);
            return true;
        }
        virtual bool IsFinished() {
            return m_pCurrentState == S112Top::GetInstance() && m_pCurrentState == m_pPseudostate;
        }
        S112Stm(): Statemachine(S112Top::GetInstance(), S112Top::GetInstance()) {}
    };
    class S18Stm: public Statemachine {
    public:
        class S18Top: public TopState{ using TThisState = S18Top;
            public: static TopState* GetInstance() { static TThisState singleInstance; return &singleInstance; }
        };
        class Entry1: public Pseudostate<Entry1>{};
        class Exit1: public Pseudostate<Exit1>{};
        class InitPt: public Pseudostate<InitPt>{};
        class S181: public S18Top { using TThisState = S181; using TSuperState = S18Top;
            public: static TopState* GetInstance() { static TThisState singleInstance; return &singleInstance; }
            virtual void Entry( Context* pContext, Statemachine* pStm ){
                if( pStm->IsEnterable<TThisState>() ){
                    std::cout << typeid(this).name() << " entry\n";
                }
            }
            virtual bool EventProc( Context* pContext, Statemachine* pStm, EventId nEventId, EventParams* pParams ){
                bool bResult = false;
                pStm->m_pSourceState = TThisState::GetInstance();
                switch( nEventId ){
                case E0:{
                    pStm->BgnTrans( pContext, S182::GetInstance() );
                    pStm->EndTrans( pContext );
                    bResult = true;
                } break;
                default: break;
                }
                return bResult;
            }
            virtual void Exit(Context* pContext, Statemachine* pStm) {
                if (pStm->IsExitable<TThisState>()) {
                    std::cout << typeid(this).name() << " exit\n";
                }
            }
        };
        class S182: public S18Top { using TThisState = S182; using TSuperState = S18Top;
            public: static TopState* GetInstance() { static TThisState singleInstance; return &singleInstance; }
            virtual void Entry( Context* pContext, Statemachine* pStm ){
                if( pStm->IsEnterable<TThisState>() ){
                    std::cout << typeid(this).name() << " entry\n";
                }
            }
            virtual bool EventProc( Context* pContext, Statemachine* pStm, EventId nEventId, EventParams* pParams ){
                bool bResult = false;
                pStm->m_pSourceState = TThisState::GetInstance();
                switch( nEventId ){
                case E2:{
                    pStm->BgnTrans( pContext, S18Top::GetInstance() );
                    pStm->EndTrans( pContext );
                    bResult = true;
                } break;
                case E3:{
                    pStm->BgnTrans( pContext, S18Top::GetInstance() );
                    pStm->m_pParentStm->m_pPseudostate = S18Stm::Exit1::GetInstance();
                    pStm->EndTrans( pContext );
                    bResult = true;
                } break;
                default: break;
                }
                return bResult;
            }
            virtual void Exit(Context* pContext, Statemachine* pStm) {
                if (pStm->IsExitable<TThisState>()) {
                    std::cout << typeid(this).name() << " exit\n";
                }
            }
        };
        virtual bool DefaultTrans( Context* pContext ){
            bool bResult = false;
            Statemachine* pStm = this;
            do {
                if (m_pPseudostate == S18Stm::Entry1::GetInstance()) {
                    pStm->BgnTrans( pContext, S181::GetInstance() );
                    pStm->EndTrans( pContext );
                    bResult = true;
                } else if (m_pCurrentState == S18Top::GetInstance() && m_pPseudostate == S18Stm::InitPt::GetInstance()) {
                    pStm->BgnTrans( pContext, S181::GetInstance() );
                    pStm->EndTrans( pContext );
                    bResult = true;
                } else if (m_pCurrentState != m_pPseudostate && dynamic_cast<S18Top*>(m_pPseudostate) != NULL) {
                    pStm->BgnTrans( pContext, dynamic_cast<TopState*>(m_pPseudostate) );
                    pStm->EndTrans( pContext );
                    bResult = true;
                } else {
                }
            } while (false);
            return bResult;
        }
        virtual bool Reset(Context* pContext, Statemachine* pParentStm, StateBase* pEntryPoint) {
            m_pParentStm = pParentStm;
            if (pEntryPoint == null) {
                if (IsFinished()) {
                    m_pPseudostate = InitPt::GetInstance();
                }
            } else {
                if (IsFinished()) {
                    m_pPseudostate = pEntryPoint;
                    return false;
                } else {
                    m_pPseudostate = pEntryPoint;
                }                    
            }
            if (pEntryPoint != null) {
            }
            return RunToCompletion(pContext);
        }
        virtual bool EventProc(Context* pContext, int nEventId, EventParams* pParams){
            bool bResult = false;
            m_pLCAState = TopState::GetInstance();
            bResult = m_pCurrentState->EventProc(pContext, this, nEventId, pParams);
            RunToCompletion(pContext);
            return bResult;
        }
        template<class TCompositeState = TopState>
        bool IsInRecur() {
            if (IsIn<TCompositeState>()) { return true; }
            return false;
        }
        virtual bool Abort(Context* pContext) {
            m_pSourceState = S18Top::GetInstance();
            BgnTrans(pContext, S18Top::GetInstance());
            EndTrans(pContext);
            return true;
        }
        virtual bool IsFinished() {
            return m_pCurrentState == S18Top::GetInstance() && m_pCurrentState == m_pPseudostate;
        }
        S18Stm(): Statemachine(S18Top::GetInstance(), S18Top::GetInstance()) {}
    };
    class MainStm: public Statemachine {
    public:
        class StmTop: public TopState{ using TThisState = StmTop;
            public: static TopState* GetInstance() { static TThisState singleInstance; return &singleInstance; }
        };
        S18Stm m_S18S18Stm;                                     
        S111Stm m_S111S111Stm;                                  
        S112Stm m_S112S112Stm;                                  
        TopState* m_pS6History;
        TopState* m_pS9History;
        class InitPt: public Pseudostate<InitPt>{};
        class Junction: public Pseudostate<Junction>{};
        class S1: public StmTop { using TThisState = S1; using TSuperState = StmTop;
            public: static TopState* GetInstance() { static TThisState singleInstance; return &singleInstance; }
            virtual void Entry( Context* pContext, Statemachine* pStm ){
                if( pStm->IsEnterable<TThisState>() ){
                    std::cout << typeid(this).name() << " entry\n";
                }
            }
            virtual bool EventProc( Context* pContext, Statemachine* pStm, EventId nEventId, EventParams* pParams ){
                bool bResult = false;
                pStm->m_pSourceState = TThisState::GetInstance();
                switch( nEventId ){
                case E1:{
                    pStm->BgnTrans( pContext, S2::GetInstance(), InitPt::GetInstance() );
                    pStm->EndTrans( pContext );
                    bResult = true;
                } break;
                case E2:{
                    int n = InputValue("Enter condition1: ");
                    if (n == 0) {
                        if (( ( MainStm* )pStm )->m_pS6History) {
                            pStm->BgnTrans( pContext, ( ( MainStm* )pStm )->m_pS6History );
                            pStm->EndTrans( pContext );
                            bResult = true;
                            break;
                        }
                        pStm->BgnTrans( pContext, S6::GetInstance(), InitPt::GetInstance() );
                        pStm->EndTrans( pContext );
                        bResult = true;
                    } else if (InputValue("Enter condition2: ") == 1) {
                        pStm->BgnTrans( pContext, S10::GetInstance() );
                        pStm->EndTrans( pContext );
                        bResult = true;
                    } else {
                        pStm->BgnTrans( pContext, S9::GetInstance(), InitPt::GetInstance() );
                        pStm->EndTrans( pContext );
                        bResult = true;
                    }
                } break;
                default: break;
                }
                return bResult;
            }
            virtual void Exit(Context* pContext, Statemachine* pStm) {
                if (pStm->IsExitable<TThisState>()) {
                    std::cout << typeid(this).name() << " exit\n";
                }
            }
        };
        class S2: public StmTop { using TThisState = S2; using TSuperState = StmTop;
            public: static TopState* GetInstance() { static TThisState singleInstance; return &singleInstance; }
            virtual void Entry( Context* pContext, Statemachine* pStm ){
                if( pStm->IsEnterable<TThisState>() ){
                    std::cout << typeid(this).name() << " entry\n";
                }
            }
            virtual bool EventProc( Context* pContext, Statemachine* pStm, EventId nEventId, EventParams* pParams ){
                bool bResult = false;
                pStm->m_pSourceState = TThisState::GetInstance();
                switch( nEventId ){
                case E2:{
                    pStm->BgnTrans( pContext, S5::GetInstance() );
                    pStm->EndTrans( pContext );
                    bResult = true;
                } break;
                case E3:{
                    if (( ( MainStm* )pStm )->m_pS6History) {
                        pStm->BgnTrans( pContext, ( ( MainStm* )pStm )->m_pS6History );
                        pStm->EndTrans( pContext );
                        bResult = true;
                        break;
                    }
                    pStm->BgnTrans( pContext, S6::GetInstance(), InitPt::GetInstance() );
                    pStm->EndTrans( pContext );
                    bResult = true;
                } break;
                default: break;
                }
                return bResult;
            }
            virtual void Exit(Context* pContext, Statemachine* pStm) {
                if (pStm->IsExitable<TThisState>()) {
                    std::cout << typeid(this).name() << " exit\n";
                }
            }
        };
        class S3: public S2 { using TThisState = S3; using TSuperState = S2;
            public: static TopState* GetInstance() { static TThisState singleInstance; return &singleInstance; }
            virtual void Entry( Context* pContext, Statemachine* pStm ){
                if( pStm->IsEnterable<TThisState>() ){
                    TSuperState::Entry( pContext, pStm );
                    std::cout << typeid(this).name() << " entry\n";
                }
            }
            virtual bool EventProc( Context* pContext, Statemachine* pStm, EventId nEventId, EventParams* pParams ){
                bool bResult = false;
                pStm->m_pSourceState = TThisState::GetInstance();
                switch( nEventId ){
                case E0:{
                    pStm->BgnTrans( pContext, S4::GetInstance() );
                    pStm->EndTrans( pContext );
                    bResult = true;
                } break;
                case E1:{
                    pStm->BgnTrans( pContext, S5::GetInstance() );
                    pStm->EndTrans( pContext );
                    bResult = true;
                } break;
                default: break;
                }
                return bResult ? bResult : TSuperState::EventProc( pContext, pStm, nEventId, pParams );
            }
            virtual void Exit(Context* pContext, Statemachine* pStm) {
                if (pStm->IsExitable<TThisState>()) {
                    std::cout << typeid(this).name() << " exit\n";
                    TSuperState::Exit(pContext, pStm);
                }
            }
        };
        class S4: public S2 { using TThisState = S4; using TSuperState = S2;
            public: static TopState* GetInstance() { static TThisState singleInstance; return &singleInstance; }
            virtual void Entry( Context* pContext, Statemachine* pStm ){
                if( pStm->IsEnterable<TThisState>() ){
                    TSuperState::Entry( pContext, pStm );
                    std::cout << typeid(this).name() << " entry\n";
                }
            }
            virtual bool EventProc( Context* pContext, Statemachine* pStm, EventId nEventId, EventParams* pParams ){
                bool bResult = false;
                pStm->m_pSourceState = TThisState::GetInstance();
                switch( nEventId ){
                case E0:{
                    pStm->BgnTrans( pContext, S2::GetInstance() );
                    pStm->EndTrans( pContext );
                    bResult = true;
                } break;
                default: break;
                }
                return bResult ? bResult : TSuperState::EventProc( pContext, pStm, nEventId, pParams );
            }
            virtual void Exit(Context* pContext, Statemachine* pStm) {
                if (pStm->IsExitable<TThisState>()) {
                    std::cout << typeid(this).name() << " exit\n";
                    TSuperState::Exit(pContext, pStm);
                }
            }
        };
        class S5: public StmTop { using TThisState = S5; using TSuperState = StmTop;
            public: static TopState* GetInstance() { static TThisState singleInstance; return &singleInstance; }
            virtual void Entry( Context* pContext, Statemachine* pStm ){
                if( pStm->IsEnterable<TThisState>() ){
                    std::cout << typeid(this).name() << " entry\n";
                }
            }
            virtual bool EventProc( Context* pContext, Statemachine* pStm, EventId nEventId, EventParams* pParams ){
                bool bResult = false;
                pStm->m_pSourceState = TThisState::GetInstance();
                switch( nEventId ){
                case E0:{
                    pStm->BgnTrans( pContext, StmTop::GetInstance() );
                    pStm->m_pPseudostate = MainStm::Junction::GetInstance();
                    pStm->EndTrans( pContext );
                    bResult = true;
                } break;
                default: break;
                }
                return bResult;
            }
            virtual void Exit(Context* pContext, Statemachine* pStm) {
                if (pStm->IsExitable<TThisState>()) {
                    std::cout << typeid(this).name() << " exit\n";
                }
            }
        };
        class S6: public StmTop { using TThisState = S6; using TSuperState = StmTop;
            public: static TopState* GetInstance() { static TThisState singleInstance; return &singleInstance; }
            virtual void Entry( Context* pContext, Statemachine* pStm ){
                if( pStm->IsEnterable<TThisState>() ){
                    std::cout << typeid(this).name() << " entry\n";
                }
            }
            virtual bool EventProc( Context* pContext, Statemachine* pStm, EventId nEventId, EventParams* pParams ){
                bool bResult = false;
                pStm->m_pSourceState = TThisState::GetInstance();
                switch( nEventId ){
                case E1:{
                    pStm->BgnTrans( pContext, StmTop::GetInstance() );
                    pStm->m_pPseudostate = MainStm::Junction::GetInstance();
                    pStm->EndTrans( pContext );
                    bResult = true;
                } break;
                case E2:{
                    pStm->m_bIsExternTrans = true;
                    pStm->BgnTrans( pContext, S8::GetInstance() );
                    pStm->EndTrans( pContext );
                    bResult = true;
                } break;
                default: break;
                }
                return bResult;
            }
            virtual void Exit(Context* pContext, Statemachine* pStm) {
                if (pStm->IsExitable<TThisState>()) {
                    std::cout << typeid(this).name() << " exit\n";
                }
            }
        };
        class S7: public S6 { using TThisState = S7; using TSuperState = S6;
            public: static TopState* GetInstance() { static TThisState singleInstance; return &singleInstance; }
            virtual void Entry( Context* pContext, Statemachine* pStm ){
                if( pStm->IsEnterable<TThisState>() ){
                    TSuperState::Entry( pContext, pStm );
                    std::cout << typeid(this).name() << " entry\n";
                    ((MainStm*)pStm)->m_pS6History = S7::GetInstance();
                }
            }
            virtual bool EventProc( Context* pContext, Statemachine* pStm, EventId nEventId, EventParams* pParams ){
                bool bResult = false;
                pStm->m_pSourceState = TThisState::GetInstance();
                switch( nEventId ){
                case E1:{
                    pStm->BgnTrans( pContext, S8::GetInstance() );
                    pStm->EndTrans( pContext );
                    bResult = true;
                } break;
                default: break;
                }
                return bResult ? bResult : TSuperState::EventProc( pContext, pStm, nEventId, pParams );
            }
            virtual void Exit(Context* pContext, Statemachine* pStm) {
                if (pStm->IsExitable<TThisState>()) {
                    std::cout << typeid(this).name() << " exit\n";
                    TSuperState::Exit(pContext, pStm);
                }
            }
        };
        class S8: public S6 { using TThisState = S8; using TSuperState = S6;
            public: static TopState* GetInstance() { static TThisState singleInstance; return &singleInstance; }
            virtual void Entry( Context* pContext, Statemachine* pStm ){
                if( pStm->IsEnterable<TThisState>() ){
                    TSuperState::Entry( pContext, pStm );
                    std::cout << typeid(this).name() << " entry\n";
                    ((MainStm*)pStm)->m_pS6History = S8::GetInstance();
                }
            }
            virtual bool EventProc( Context* pContext, Statemachine* pStm, EventId nEventId, EventParams* pParams ){
                bool bResult = false;
                pStm->m_pSourceState = TThisState::GetInstance();
                return bResult ? bResult : TSuperState::EventProc( pContext, pStm, nEventId, pParams );
            }
            virtual void Exit(Context* pContext, Statemachine* pStm) {
                if (pStm->IsExitable<TThisState>()) {
                    std::cout << typeid(this).name() << " exit\n";
                    TSuperState::Exit(pContext, pStm);
                }
            }
        };
        class S18: public StmTop { using TThisState = S18; using TSuperState = StmTop;
            public: static TopState* GetInstance() { static TThisState singleInstance; return &singleInstance; }
            virtual void Entry( Context* pContext, Statemachine* pStm ){
                if( pStm->IsEnterable<TThisState>() ){
                    std::cout << typeid(this).name() << " entry\n";
                    ((MainStm*)pStm)->m_S18S18Stm.Reset( pContext, pStm, nullptr );
                }
            }
            virtual bool EventProc( Context* pContext, Statemachine* pStm, EventId nEventId, EventParams* pParams ){
                bool bResult = false;
                pStm->m_pSourceState = TThisState::GetInstance();
                switch( nEventId ){
                case E3:{
                    pStm->BgnTrans( pContext, S19::GetInstance() );
                    pStm->EndTrans( pContext );
                    bResult = true;
                } break;
                case E4:{
                    if (( ( MainStm* )pStm )->m_pS6History) {
                        pStm->BgnTrans( pContext, ( ( MainStm* )pStm )->m_pS6History );
                        pStm->EndTrans( pContext );
                        bResult = true;
                        break;
                    }
                    pStm->BgnTrans( pContext, S6::GetInstance(), InitPt::GetInstance() );
                    pStm->EndTrans( pContext );
                    bResult = true;
                } break;
                default: break;
                }
                return bResult;
            }
            virtual void Exit(Context* pContext, Statemachine* pStm) {
                if (pStm->IsExitable<TThisState>()) {
                    ((MainStm*)pStm)->m_S18S18Stm.Abort( pContext );
                    std::cout << typeid(this).name() << " exit\n";
                }
            }
        };
        class S11: public StmTop { using TThisState = S11; using TSuperState = StmTop;
            public: static TopState* GetInstance() { static TThisState singleInstance; return &singleInstance; }
            virtual void Entry( Context* pContext, Statemachine* pStm ){
                if( pStm->IsEnterable<TThisState>() ){
                    std::cout << typeid(this).name() << " entry\n";
                    ((MainStm*)pStm)->m_S111S111Stm.Reset( pContext, pStm, nullptr );
                    ((MainStm*)pStm)->m_S112S112Stm.Reset( pContext, pStm, nullptr );
                }
            }
            virtual bool EventProc( Context* pContext, Statemachine* pStm, EventId nEventId, EventParams* pParams ){
                bool bResult = false;
                pStm->m_pSourceState = TThisState::GetInstance();
                switch( nEventId ){
                case E4:{
                    pStm->BgnTrans( pContext, StmTop::GetInstance() );
                    pStm->EndTrans( pContext );
                    bResult = true;
                } break;
                case E5:{
                    if (( ( MainStm* )pStm )->m_pS9History) {
                        pStm->BgnTrans( pContext, ( ( MainStm* )pStm )->m_pS9History );
                        pStm->EndTrans( pContext );
                        bResult = true;
                        break;
                    }
                } break;
                default: break;
                }
                return bResult;
            }
            virtual void Exit(Context* pContext, Statemachine* pStm) {
                if (pStm->IsExitable<TThisState>()) {
                    ((MainStm*)pStm)->m_S111S111Stm.Abort( pContext );
                    ((MainStm*)pStm)->m_S112S112Stm.Abort( pContext );
                    std::cout << typeid(this).name() << " exit\n";
                }
            }
        };
        class S12: public S11 { using TThisState = S12; using TSuperState = S11;
            public: static TopState* GetInstance() { static TThisState singleInstance; return &singleInstance; }
            virtual void Entry( Context* pContext, Statemachine* pStm ){
                if( pStm->IsEnterable<TThisState>() ){
                    TSuperState::Entry( pContext, pStm );
                    std::cout << typeid(this).name() << " entry\n";
                }
            }
            virtual bool EventProc( Context* pContext, Statemachine* pStm, EventId nEventId, EventParams* pParams ){
                bool bResult = false;
                pStm->m_pSourceState = TThisState::GetInstance();
                switch( nEventId ){
                case E1:{
                    pStm->BgnTrans( pContext, S13::GetInstance() );
                    pStm->EndTrans( pContext );
                    bResult = true;
                } break;
                default: break;
                }
                return bResult ? bResult : TSuperState::EventProc( pContext, pStm, nEventId, pParams );
            }
            virtual void Exit(Context* pContext, Statemachine* pStm) {
                if (pStm->IsExitable<TThisState>()) {
                    std::cout << typeid(this).name() << " exit\n";
                    TSuperState::Exit(pContext, pStm);
                }
            }
        };
        class S13: public S11 { using TThisState = S13; using TSuperState = S11;
            public: static TopState* GetInstance() { static TThisState singleInstance; return &singleInstance; }
            virtual void Entry( Context* pContext, Statemachine* pStm ){
                if( pStm->IsEnterable<TThisState>() ){
                    TSuperState::Entry( pContext, pStm );
                    std::cout << typeid(this).name() << " entry\n";
                }
            }
            virtual bool EventProc( Context* pContext, Statemachine* pStm, EventId nEventId, EventParams* pParams ){
                bool bResult = false;
                pStm->m_pSourceState = TThisState::GetInstance();
                switch( nEventId ){
                case E5:{
                    if (((ContextImpl*)pContext)->IsIn<S111Stm::S15>()) {
                        pStm->BgnTrans( pContext, S20::GetInstance() );
                        pStm->EndTrans( pContext );
                        bResult = true;
                    }
                } break;
                default: break;
                }
                return bResult ? bResult : TSuperState::EventProc( pContext, pStm, nEventId, pParams );
            }
            virtual void Exit(Context* pContext, Statemachine* pStm) {
                if (pStm->IsExitable<TThisState>()) {
                    std::cout << typeid(this).name() << " exit\n";
                    TSuperState::Exit(pContext, pStm);
                }
            }
        };
        class S9: public StmTop { using TThisState = S9; using TSuperState = StmTop;
            public: static TopState* GetInstance() { static TThisState singleInstance; return &singleInstance; }
            virtual void Entry( Context* pContext, Statemachine* pStm ){
                if( pStm->IsEnterable<TThisState>() ){
                    std::cout << typeid(this).name() << " entry\n";
                }
            }
            virtual bool EventProc( Context* pContext, Statemachine* pStm, EventId nEventId, EventParams* pParams ){
                bool bResult = false;
                pStm->m_pSourceState = TThisState::GetInstance();
                switch( nEventId ){
                case E1:{
                    pStm->m_bIsExternTrans = true;
                    pStm->BgnTrans( pContext, S91::GetInstance() );
                    pStm->EndTrans( pContext );
                    bResult = true;
                } break;
                case E2:{
                    pStm->BgnTrans( pContext, S92::GetInstance() );
                    pStm->EndTrans( pContext );
                    bResult = true;
                } break;
                case E3:{
                    pStm->BgnTrans( pContext, S11::GetInstance(), InitPt::GetInstance() );
                    ((MainStm*)pStm)->m_S111S111Stm.Reset(pContext, pStm, S111Stm::Entry1::GetInstance());
                    ((MainStm*)pStm)->m_S112S112Stm.Reset(pContext, pStm, S112Stm::Entry1::GetInstance());
                    pStm->EndTrans( pContext );
                    bResult = true;
                } break;
                default: break;
                }
                return bResult;
            }
            virtual void Exit(Context* pContext, Statemachine* pStm) {
                if (pStm->IsExitable<TThisState>()) {
                    std::cout << typeid(this).name() << " exit\n";
                }
            }
        };
        class S91: public S9 { using TThisState = S91; using TSuperState = S9;
            public: static TopState* GetInstance() { static TThisState singleInstance; return &singleInstance; }
            virtual void Entry( Context* pContext, Statemachine* pStm ){
                if( pStm->IsEnterable<TThisState>() ){
                    TSuperState::Entry( pContext, pStm );
                    std::cout << typeid(this).name() << " entry\n";
                    ((MainStm*)pStm)->m_pS9History = S91::GetInstance();
                }
            }
            virtual bool EventProc( Context* pContext, Statemachine* pStm, EventId nEventId, EventParams* pParams ){
                bool bResult = false;
                pStm->m_pSourceState = TThisState::GetInstance();
                return bResult ? bResult : TSuperState::EventProc( pContext, pStm, nEventId, pParams );
            }
            virtual void Exit(Context* pContext, Statemachine* pStm) {
                if (pStm->IsExitable<TThisState>()) {
                    std::cout << typeid(this).name() << " exit\n";
                    TSuperState::Exit(pContext, pStm);
                }
            }
        };
        class S92: public S9 { using TThisState = S92; using TSuperState = S9;
            public: static TopState* GetInstance() { static TThisState singleInstance; return &singleInstance; }
            virtual void Entry( Context* pContext, Statemachine* pStm ){
                if( pStm->IsEnterable<TThisState>() ){
                    TSuperState::Entry( pContext, pStm );
                    std::cout << typeid(this).name() << " entry\n";
                    ((MainStm*)pStm)->m_pS9History = S92::GetInstance();
                }
            }
            virtual bool EventProc( Context* pContext, Statemachine* pStm, EventId nEventId, EventParams* pParams ){
                bool bResult = false;
                pStm->m_pSourceState = TThisState::GetInstance();
                return bResult ? bResult : TSuperState::EventProc( pContext, pStm, nEventId, pParams );
            }
            virtual void Exit(Context* pContext, Statemachine* pStm) {
                if (pStm->IsExitable<TThisState>()) {
                    std::cout << typeid(this).name() << " exit\n";
                    TSuperState::Exit(pContext, pStm);
                }
            }
        };
        class S19: public StmTop { using TThisState = S19; using TSuperState = StmTop;
            public: static TopState* GetInstance() { static TThisState singleInstance; return &singleInstance; }
            virtual void Entry( Context* pContext, Statemachine* pStm ){
                if( pStm->IsEnterable<TThisState>() ){
                    std::cout << typeid(this).name() << " entry\n";
                }
            }
            virtual bool EventProc( Context* pContext, Statemachine* pStm, EventId nEventId, EventParams* pParams ){
                bool bResult = false;
                pStm->m_pSourceState = TThisState::GetInstance();
                switch( nEventId ){
                case E0:{
                    pStm->BgnTrans( pContext, S20::GetInstance() );
                    pStm->EndTrans( pContext );
                    bResult = true;
                } break;
                default: break;
                }
                return bResult;
            }
            virtual void Exit(Context* pContext, Statemachine* pStm) {
                if (pStm->IsExitable<TThisState>()) {
                    std::cout << typeid(this).name() << " exit\n";
                }
            }
        };
        class S20: public StmTop { using TThisState = S20; using TSuperState = StmTop;
            public: static TopState* GetInstance() { static TThisState singleInstance; return &singleInstance; }
            virtual void Entry( Context* pContext, Statemachine* pStm ){
                if( pStm->IsEnterable<TThisState>() ){
                    std::cout << typeid(this).name() << " entry\n";
                }
            }
            virtual bool EventProc( Context* pContext, Statemachine* pStm, EventId nEventId, EventParams* pParams ){
                bool bResult = false;
                pStm->m_pSourceState = TThisState::GetInstance();
                switch( nEventId ){
                case E1:{
                    pStm->BgnTrans( pContext, StmTop::GetInstance() );
                    pStm->EndTrans( pContext );
                    bResult = true;
                } break;
                case E2:{
                    pStm->BgnTrans( pContext, S11::GetInstance(), InitPt::GetInstance() );
                    ((MainStm*)pStm)->m_S112S112Stm.Reset(pContext, pStm, S112Stm::Entry2::GetInstance());
                    pStm->EndTrans( pContext );
                    bResult = true;
                } break;
                default: break;
                }
                return bResult;
            }
            virtual void Exit(Context* pContext, Statemachine* pStm) {
                if (pStm->IsExitable<TThisState>()) {
                    std::cout << typeid(this).name() << " exit\n";
                }
            }
        };
        class S10: public StmTop { using TThisState = S10; using TSuperState = StmTop;
            public: static TopState* GetInstance() { static TThisState singleInstance; return &singleInstance; }
            virtual void Entry( Context* pContext, Statemachine* pStm ){
                if( pStm->IsEnterable<TThisState>() ){
                    std::cout << typeid(this).name() << " entry\n";
                }
            }
            virtual bool EventProc( Context* pContext, Statemachine* pStm, EventId nEventId, EventParams* pParams ){
                bool bResult = false;
                pStm->m_pSourceState = TThisState::GetInstance();
                switch( nEventId ){
                case E1:{
                    pStm->m_bIsExternTrans = true;
                    pStm->BgnTrans( pContext, S10::GetInstance() );
                    pStm->EndTrans( pContext );
                    bResult = true;
                } break;
                case E2:{
                    int n = InputValue("Enter condition1: ");
                    if (n == 0) {
                        pStm->BgnTrans( pContext, S7::GetInstance() );
                        pStm->EndTrans( pContext );
                        bResult = true;
                    } else if (n == 1) {
                        pStm->BgnTrans( pContext, S11::GetInstance(), InitPt::GetInstance() );
                        pStm->EndTrans( pContext );
                        bResult = true;
                    } else {
                        pStm->BgnTrans( pContext, S18::GetInstance() );
                        ((MainStm*)pStm)->m_S18S18Stm.Reset(pContext, pStm, S18Stm::Entry1::GetInstance());
                        pStm->EndTrans( pContext );
                        bResult = true;
                    }
                } break;
                default: break;
                }
                return bResult;
            }
            virtual void Exit(Context* pContext, Statemachine* pStm) {
                if (pStm->IsExitable<TThisState>()) {
                    std::cout << typeid(this).name() << " exit\n";
                }
            }
        };
        virtual bool DefaultTrans( Context* pContext ){
            bool bResult = false;
            Statemachine* pStm = this;
            bResult |= m_S18S18Stm.DefaultTrans( pContext );
            bResult |= m_S111S111Stm.DefaultTrans( pContext );
            bResult |= m_S112S112Stm.DefaultTrans( pContext );
            do {
                if (m_pCurrentState == StmTop::GetInstance() && m_pPseudostate == MainStm::InitPt::GetInstance()) {
                    pStm->BgnTrans( pContext, S1::GetInstance() );
                    pStm->EndTrans( pContext );
                    bResult = true;
                } else if (m_pCurrentState == S2::GetInstance() && m_pPseudostate == MainStm::InitPt::GetInstance()) {
                    pStm->BgnTrans( pContext, S3::GetInstance() );
                    pStm->EndTrans( pContext );
                    bResult = true;
                } else if (m_pCurrentState == S6::GetInstance() && m_pPseudostate == MainStm::InitPt::GetInstance()) {
                    pStm->BgnTrans( pContext, S7::GetInstance() );
                    pStm->EndTrans( pContext );
                    bResult = true;
                } else if (m_pPseudostate == MainStm::Junction::GetInstance()) {
                    pStm->BgnTrans( pContext, S18::GetInstance() );
                    pStm->EndTrans( pContext );
                    bResult = true;
                } else if (m_pCurrentState == S18::GetInstance() && m_pPseudostate == S18Stm::Exit1::GetInstance()) {
                    pStm->BgnTrans( pContext, S19::GetInstance() );
                    pStm->EndTrans( pContext );
                    bResult = true;
                } else if (m_pCurrentState == S11::GetInstance() && m_pPseudostate == MainStm::InitPt::GetInstance()) {
                    pStm->BgnTrans( pContext, S12::GetInstance() );
                    pStm->EndTrans( pContext );
                    bResult = true;
                } else if (m_pCurrentState == S9::GetInstance() && m_pPseudostate == MainStm::InitPt::GetInstance()) {
                    pStm->BgnTrans( pContext, S91::GetInstance() );
                    pStm->EndTrans( pContext );
                    bResult = true;
                } else if (m_pCurrentState != m_pPseudostate && dynamic_cast<StmTop*>(m_pPseudostate) != NULL) {
                    pStm->BgnTrans( pContext, dynamic_cast<TopState*>(m_pPseudostate) );
                    pStm->EndTrans( pContext );
                    bResult = true;
                } else {
                }
            } while (false);
            return bResult;
        }
        virtual bool Reset(Context* pContext, Statemachine* pParentStm, StateBase* pEntryPoint) {
            m_pParentStm = pParentStm;
            if (pEntryPoint == null) {
                if (IsFinished()) {
                    m_pPseudostate = InitPt::GetInstance();
                }
            } else {
                if (IsFinished()) {
                    m_pPseudostate = pEntryPoint;
                    return false;
                } else {
                    m_pPseudostate = pEntryPoint;
                }                    
            }
            if (pEntryPoint != null) {
                m_S18S18Stm.Reset( pContext, this, pEntryPoint );
                m_S111S111Stm.Reset( pContext, this, pEntryPoint );
                m_S112S112Stm.Reset( pContext, this, pEntryPoint );
            }
            return RunToCompletion(pContext);
        }
        virtual bool EventProc(Context* pContext, int nEventId, EventParams* pParams){
            bool bResult = false;
            m_pLCAState = TopState::GetInstance();
            bResult |= m_S18S18Stm.EventProc( pContext, nEventId, pParams );
            bResult |= m_S111S111Stm.EventProc( pContext, nEventId, pParams );
            bResult |= m_S112S112Stm.EventProc( pContext, nEventId, pParams );
            bResult = m_pCurrentState->EventProc(pContext, this, nEventId, pParams);
            RunToCompletion(pContext);
            return bResult;
        }
        template<class TCompositeState = TopState>
        bool IsInRecur() {
            if (m_S18S18Stm.IsInRecur<TCompositeState>()) { return true; }
            if (m_S111S111Stm.IsInRecur<TCompositeState>()) { return true; }
            if (m_S112S112Stm.IsInRecur<TCompositeState>()) { return true; }
            if (IsIn<TCompositeState>()) { return true; }
            return false;
        }
        virtual bool Abort(Context* pContext) {
            m_pSourceState = StmTop::GetInstance();
            BgnTrans(pContext, StmTop::GetInstance());
            EndTrans(pContext);
            return true;
        }
        virtual bool IsFinished() {
            return m_pCurrentState == StmTop::GetInstance() && m_pCurrentState == m_pPseudostate;
        }
        MainStm(): Statemachine(StmTop::GetInstance(), StmTop::GetInstance()) {}
    };
    public:  ContextImpl(
        int _attribute0,
        Composition _aComposition
    ):  Context( _attribute0, _aComposition ),
        attribute2( 123 ),
        attribute3( 789 )
    {
    }                                                                                           
    private: int attribute2;                                    
    private: int attribute3;                                    
    MainStm mainStm;                                            
public:
    bool Start() {
        mainStm.Abort(this);
        return mainStm.Reset(this, nullptr, nullptr);
    }
    bool EventProc(EventId nEventId, EventParams* pParams) {
        return mainStm.EventProc(this, nEventId, pParams);
    }
    template<class TState>
    bool IsIn() {
        return mainStm.IsInRecur<TState>();
    }
};
