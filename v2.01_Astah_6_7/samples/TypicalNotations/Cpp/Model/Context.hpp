#pragma once
/* File generated by Đức's ClasHStamP */
#include "Generic/CommonInclude.h"
#include "Model/BaseClass.hpp"                                  
#include "Interfaces/Interface2.hpp"                            
#include "Interfaces/Interface1.hpp"                            
#include "Model/Composition.hpp"                                
#include "Model/Aggregration.hpp"                               
#include "Model/CalledDependency.hpp"                           
#include "Model/UsedDependency.hpp"                             

class Context: public BaseClass, public Interface2, public Interface1{
    public: virtual void virtualFunc(
        int param0
    ){
        std::cout << "Executing operation1" << std::endl;
    } /* Context.virtualFunc */
    public:  static void staticFunc(
    ){
    } /* Context.staticFunc */
    public: void leafFunc(
    ){
    } /* Context.leafFunc */
    public: void operation1(
    ){
    } /* Context.operation1 */
    public: void operation2(
    ){
    } /* Context.operation2 */
    friend class Main;
    public:  Context(
        int _attribute0,
        Composition _aComposition
    ):  BaseClass(  ),
        attribute1( 345 ),
        attribute0( _attribute0 ),
        anAggregation( null ),
        aComposition( _aComposition )
    {
    }                                                                                           
    private: int attribute1;                                    
    private: int attribute0;                                    
    private: Aggregration* anAggregation;                       
    private: Composition aComposition;                          
};
