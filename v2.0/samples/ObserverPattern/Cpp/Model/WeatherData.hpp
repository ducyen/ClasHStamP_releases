#pragma once
/* File generated by Đức's ClasHStamP */
#include "Generic/CommonInclude.h"
#include "Interfaces/Subject.hpp"                               
#include "Interfaces/ObserverIfc.hpp"                           

class WeatherData: public Subject{
    public: virtual void registerObserver(
        ObserverIfc* o
    ){
        observers.push_back(o);
    } /* WeatherData.registerObserver */
    public: virtual void removeObserver(
        ObserverIfc* o
    ){
        int i = 0;
        for (ObserverIfc* observer: observers) {
            if (observer == o) {
                break;
            }
            i++;
        }
        if (i >= 0) {
            observers.erase(observers.begin() + i);
        }
    } /* WeatherData.removeObserver */
    public: virtual void notifyObserver(
    ){
        for (ObserverIfc* observer: observers) {
            observer->update(temperature, humidity, pressure);
        }
    } /* WeatherData.notifyObserver */
    public: void measurementsChanged(
    ){
        notifyObserver();
    } /* WeatherData.measurementsChanged */
    public: void setMeasurements(
        float temperature,
        float humidity,
        float pressure
    ){
    	this->temperature = temperature;
    	this->humidity = humidity;
    	this->pressure = pressure;
    	measurementsChanged();
    } /* WeatherData.setMeasurements */
    friend class Main;
    public:  WeatherData(
    ): temperature( 0 ),
        humidity( 0 ),
        pressure( 0 ),
        observers(   )
    {
    }                                                                                           
    private: float temperature;                                 
    private: float humidity;                                    
    private: float pressure;                                    
    private: std::vector<ObserverIfc*> observers;               
};
