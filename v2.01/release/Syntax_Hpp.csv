item,name,ext1st,extnxt,begin,end
file,[cONTAINER]/[Name].hpp,"#include ""[cONTAINER]/[Name].hpp""[->64][dESC]
","#include ""[cONTAINER]/[Name].hpp""[->64][dESC]
","#pragma once
/* File generated by Đức's ClasHStamP */
#include ""Generic/CommonInclude.h""
",
class,"[mODIFIER]
class [nAME][tYPE]",,,"{
","};
"
b_enum,"public:  enum [Name] {
","    [NAME],[->64][dESC]
","    [NAME],[->64][dESC]
",,"    [NAME]_NUM
};
const TCHAR* [Name]_toString( [NAME] value );
"
c_enum,"protected:  enum [Name] {
","    [NAME],[->64][dESC]
","    [NAME],[->64][dESC]
",,"    [NAME]_NUM
};
"
i_enum,"private: enum [Name] {
","    [NAME],[->64][dESC]
","    [NAME],[->64][dESC]
",,"    [NAME]_NUM
};
"
b_struct,"public:  struct [Name] {
","    [tYPE] [nAME][mODIFIER];[->64][dESC]
","    [tYPE] [nAME][mODIFIER];[->64][dESC]
","public:  struct [Name]: [TYPE]{
","[->]};
"
c_struct,"protected:  struct [Name] {
","    [tYPE] [nAME][mODIFIER];[->64][dESC]
","    [tYPE] [nAME][mODIFIER];[->64][dESC]
","protected:  struct [Name]: [TYPE]{
","[->]};
"
i_struct,"private: struct [Name] {
","    [tYPE] [nAME][mODIFIER];[->64][dESC]
","    [tYPE] [nAME][mODIFIER];[->64][dESC]
","private: struct [Name]: [TYPE]{
","};
"
constructor,[->]public:  [Name](,,,"
[->])","
[->]{
[vALUE][->]}[->96]
"
attr_group,,,,,
ctor_call,"
[->]):  [tYPE]( [vALUE] )",[vALUE],", [vALUE]",_[nAME],[nAME]
__s_attr,"[->][scope][tYPE][mODIFIER] [nAME];[->64][dESC]
","
[->]    [tYPE] _[nAME]",",
[->]    [tYPE] _[nAME]",: [nAME]( [vALUE] ),",
[->][nAME]( [vALUE] )"
__o_attr,"[->][scope][tYPE][mODIFIER] [nAME];[->64][dESC]
","
[->]    [tYPE] _[nAME]",",
[->]    [tYPE] _[nAME]",: [nAME]( [vALUE] ),",
[->][nAME]( [vALUE] )"
__r_attr,"[->][scope][tYPE][mODIFIER]* [nAME];[->64][dESC]
","
[->]    [tYPE] *_[nAME]",",
[->]    [tYPE] *_[nAME]",: [nAME]( [vALUE] ),",
[->][nAME]( [vALUE] )"
_ms_attr,"[->][scope]std::vector<[tYPE]> [nAME];[->64][dESC]
","
[->]    std::vector<[tYPE]> &_[nAME]",",
[->]    std::vector<[tYPE]> &_[nAME]",: [nAME]( [vALUE] ),",
[->][nAME]( [vALUE] )"
_mo_attr,"[->][scope]std::vector<[tYPE]*> [nAME];[->64][dESC]
","
[->]    std::vector<[tYPE]*> &_[nAME]",",
[->]    std::vector<[tYPE]*> &_[nAME]",: [nAME]( [vALUE] ),",
[->][nAME]( [vALUE] )"
_mr_attr,"[->][scope]std::vector<[tYPE]*> [nAME];[->64][dESC]
","
[->]    std::vector<[tYPE]*> &_[nAME]",",
[->]    std::vector<[tYPE]*> &_[nAME]",: [nAME]( [vALUE] ),",
[->][nAME]( [vALUE] )"
c_s_attr,"[->][scope]const [tYPE][mODIFIER] [nAME];[->64][dESC]
","
[->]    [tYPE] _[nAME]",",
[->]    [tYPE] _[nAME]",: [nAME]( [vALUE] ),",
[->][nAME]( [vALUE] )"
c_o_attr,"[->][scope]const [tYPE][mODIFIER] [nAME];[->64][dESC]
","
[->]    [tYPE] *_[nAME]",",
[->]    [tYPE] *_[nAME]",: [nAME]( [vALUE] ),",
[->][nAME]( [vALUE] )"
c_r_attr,"[->][scope]const [tYPE][mODIFIER]* [nAME];[->64][dESC]
","
[->]    [tYPE] *_[nAME]",",
[->]    [tYPE] *_[nAME]",: [nAME]( [vALUE] ),",
[->][nAME]( [vALUE] )"
cms_attr,"[->][scope]const std::vector<[tYPE]> [nAME];[->64][dESC]
","
[->]    std::vector<[tYPE]> &_[nAME]",",
[->]    std::vector<[tYPE]> &_[nAME]",: [nAME]( [vALUE] ),",
[->][nAME]( [vALUE] )"
cmo_attr,"[->][scope]const std::vector<[tYPE]*> [nAME];[->64][dESC]
","
[->]    std::vector<[tYPE]*> &_[nAME]",",
[->]    std::vector<[tYPE]*> &_[nAME]",: [nAME]( [vALUE] ),",
[->][nAME]( [vALUE] )"
cmr_attr,"[->][scope]const std::vector<[tYPE]*> [nAME];[->64][dESC]
","
[->]    std::vector<[tYPE]*> &_[nAME]",",
[->]    std::vector<[tYPE]*> &_[nAME]",: [nAME]( [vALUE] ),",
[->][nAME]( [vALUE] )"
s_s_attr,"[->][scope]static [tYPE] [nAME];[->64][dESC]
","[->][scope]static const [tYPE] [nAME] = [vALUE];[->64][dESC]
",,,"[->][scope]static [tYPE][mODIFIER] [nAME];[->64][dESC]
"
s_o_attr,"[->][scope]static [tYPE] [nAME];[->64][dESC]
","[->][scope]static const [tYPE] [nAME] = [vALUE];[->64][dESC]
",,,"[->][scope]static [tYPE][mODIFIER] [nAME];[->64][dESC]
"
s_r_attr,"[->][scope]static [tYPE]* [nAME];[->64][dESC]
","[->][scope]static const [tYPE]* [nAME] = [vALUE];[->64][dESC]
",,,"[->][scope]static [tYPE][mODIFIER]* [nAME];[->64][dESC]
"
sms_attr,"[->][scope]static std::vector<[tYPE]> [nAME];[->64][dESC]
","[->][scope]static const std::vector<[tYPE]> [nAME] = [vALUE];[->64][dESC]
",,,"[->][scope]static std::vector<[tYPE]> [nAME];[->64][dESC]
"
smo_attr,"[->][scope]static std::vector<[tYPE]*> [nAME];[->64][dESC]
","[->][scope]static const std::vector<[tYPE]*> [nAME] = [vALUE];[->64][dESC]
",,,"[->][scope]static std::vector<[tYPE]*> [nAME];[->64][dESC]
"
smr_attr,"[->][scope]static std::vector<[tYPE]*> [nAME];[->64][dESC]
","[->][scope]static const std::vector<[tYPE]*> [nAME] = [vALUE];[->64][dESC]
",,,"[->][scope]static std::vector<[tYPE]*> [nAME];[->64][dESC]
"
p_s_attr,,"[->]protected: virtual [tYPE] get[Name]() const {
[vALUE][->]};
","[->]protected: virtual [tYPE]& set[Name](const [tYPE]& value) {
[vALUE][->]};
","[->]return [nAME];
","[->]return [nAME] = value;
"
p_o_attr,,"[->]protected: virtual [tYPE] get[Name]() const {
[vALUE][->]};
","[->]protected: virtual [tYPE]& set[Name](const [tYPE]& value) {
[vALUE][->]};
","[->]return [nAME];
","[->]return [nAME] = value;
"
p_r_attr,,"[->]protected: virtual [tYPE] get[Name]() const {
[vALUE][->]};
","[->]protected: virtual [tYPE]& set[Name](const [tYPE]& value) {
[vALUE][->]};
","[->]return [nAME];
","[->]return [nAME] = value;
"
pms_attr,,"[->]protected: virtual [tYPE] get[Name]() const {
[vALUE][->]};
","[->]protected: virtual [tYPE]& set[Name](const [tYPE]& value) {
[vALUE][->]};
","[->]return [nAME];
","[->]return [nAME] = value;
"
pmo_attr,,"[->]protected: virtual [tYPE] get[Name]() const {
[vALUE][->]};
","[->]protected: virtual [tYPE]& set[Name](const [tYPE]& value) {
[vALUE][->]};
","[->]return [nAME];
","[->]return [nAME] = value;
"
pmr_attr,,"[->]protected: virtual [tYPE] get[Name]() const {
[vALUE][->]};
","[->]protected: virtual [tYPE]& set[Name](const [tYPE]& value) {
[vALUE][->]};
","[->]return [nAME];
","[->]return [nAME] = value;
"
vptr_impl,,,,,
__c_oper,[->]protected: virtual [tYPE] [nAME](,"
[->][tYPE][mODIFIER] [nAME]",",
[->][tYPE][mODIFIER] [nAME]","
[->])[vALUE]{
","[->]} /* [Container].[nAME] */

"
__b_oper,[->]public: virtual [tYPE] [nAME](,"
[->][tYPE][mODIFIER] [nAME]",",
[->][tYPE][mODIFIER] [nAME]","
[->])[vALUE]{
","[->]} /* [Container].[nAME] */
"
vptr_decl,,,,,
_ac_oper,[->]protected: virtual [tYPE] [nAME](,"
[->][tYPE][mODIFIER] [nAME]",",
[->][tYPE][mODIFIER] [nAME]","
[->]) = 0;
",
_ab_oper,[->]public: virtual [tYPE] [nAME](,"
[->][tYPE][mODIFIER] [nAME]",",
[->][tYPE][mODIFIER] [nAME]","
[->]) = 0;
",
l_i_oper,[->]private: [tYPE] [nAME](,"
[->][tYPE][mODIFIER] [nAME]",",
[->][tYPE][mODIFIER] [nAME]","
[->])[vALUE]{
","[->]} /* [Container].[nAME] */
"
l_c_oper,[->]protected: [tYPE] [nAME](,"
[->][tYPE][mODIFIER] [nAME]",",
[->][tYPE][mODIFIER] [nAME]","
[->])[vALUE]{
","[->]} /* [Container].[nAME] */
"
l_b_oper,[->]public: [tYPE] [nAME](,"
[->][tYPE][mODIFIER] [nAME]",",
[->][tYPE][mODIFIER] [nAME]","
[->])[vALUE]{
","[->]} /* [Container].[nAME] */
"
lai_oper,,,,,
vptr_call,,,,,
s_i_oper,[->]private: static [tYPE] [nAME](,"
[->][tYPE][mODIFIER] [nAME]",",
[->][tYPE][mODIFIER] [nAME]","
[->])[vALUE]{
","[->]} /* [Container].[nAME] */
"
s_c_oper,[->]protected:  static [tYPE] [nAME](,"
[->][tYPE][mODIFIER] [nAME]",",
[->][tYPE][mODIFIER] [nAME]","
[->])[vALUE]{
","[->]} /* [Container].[nAME] */
"
s_b_oper,[->]public:  static [tYPE] [nAME](,"
[->][tYPE][mODIFIER] [nAME]",",
[->][tYPE][mODIFIER] [nAME]","
[->])[vALUE]{
","[->]} /* [Container].[nAME] */
"
sai_oper,,,,,
sab_oper,,,,,
event_decl,"[->]public: enum _EventId {
","[->][nAME],
","[->][nAME],
",,"[->]    evNum
[->]};
[->]const std::string EventId_toString( _EventId value );
"
state_decl,,,,"[->]class [nAME]: public Pseudostate<[nAME]>{};
",
state_entry,,,,,
state_exit,,,,,
state_impl,"[->]virtual bool Reset(Context* pContext, Statemachine* pParentStm, StateBase* pEntryPoint) {
[->]    m_pParentStm = pParentStm;
[->]    if (pEntryPoint == null) {
[->]        if (IsFinished()) {
[->]            m_pPseudostate = [mODIFIER]::GetInstance();
[->]        }
[->]    } else {
[->]        if (IsFinished()) {
[->]            m_pPseudostate = pEntryPoint;
[->]            return false;
[->]        } else {
[->]            m_pPseudostate = pEntryPoint;
[->]        }                    
[->]    }
[->]    if (pEntryPoint != null) {
[vALUE][->]    }
[->]    return RunToCompletion(pContext);
[->]}
[->]virtual bool EventProc(Context* pContext, int nEventId, EventParams* pParams){
[->]    bool bResult = false;
[->]    m_pLCAState = TopState::GetInstance();
",,,,"[->]    bResult = m_pCurrentState->EventProc(pContext, this, nEventId, pParams);
[->]    RunToCompletion(pContext);
[->]    return bResult;
[->]}
[->]template<class TCompositeState = TopState>
[->]bool IsInRecur() {
[vALUE][->]    if (IsIn<TCompositeState>()) { return true; }
[->]    return false;
[->]}
[->]virtual bool Abort(Context* pContext) {
[->]    m_pSourceState = [nAME]::GetInstance();
[->]    BgnTrans(pContext, [nAME]::GetInstance());
[->]    EndTrans(pContext);
[->]    return true;
[->]}
[->]virtual bool IsFinished() {
[->]    return m_pCurrentState == [nAME]::GetInstance() && m_pCurrentState == m_pPseudostate;
[->]}
[->][sCOPE](): Statemachine([nAME]::GetInstance(), [nAME]::GetInstance()) {}
"
transition,"[->]class [nAME]: public [cONTAINER] { using TThisState = [nAME]; using TSuperState = [cONTAINER];
[->]    public: static TopState* GetInstance() { static TThisState singleInstance; return &singleInstance; }
[->]    virtual void Entry( Context* pContext, Statemachine* pStm ){
[->]        if( pStm->IsEnterable<TThisState>() ){
[->]            TSuperState::Entry( pContext, pStm );
[->]            std::cout << typeid(this).name() << "" entry\n"";
[vALUE][->]        }
[->]    }
[->]    virtual bool EventProc( Context* pContext, Statemachine* pStm, EventId nEventId, EventParams* pParams ){
[->]        bool bResult = false;
[->]        pStm->m_pSourceState = TThisState::GetInstance();
","[->]    switch( nEventId ){
[->]    case [nAME]:{
","[->]    } break;
[->]    case [nAME]:{
","[->]    } break;
[->]    default: break;
[->]    }
","[->]        return bResult ? bResult : TSuperState::EventProc( pContext, pStm, nEventId, pParams );
[->]    }
[->]    virtual void Exit(Context* pContext, Statemachine* pStm) {
[->]        if (pStm->IsExitable<TThisState>()) {
[vALUE][->]            std::cout << typeid(this).name() << "" exit\n"";
[->]            TSuperState::Exit(pContext, pStm);
[->]        }
[->]    }
[->]};
"
trans_top,"[->]class [nAME]: public [cONTAINER] { using TThisState = [nAME]; using TSuperState = [cONTAINER];
[->]    public: static TopState* GetInstance() { static TThisState singleInstance; return &singleInstance; }
[->]    virtual void Entry( Context* pContext, Statemachine* pStm ){
[->]        if( pStm->IsEnterable<TThisState>() ){
[->]            std::cout << typeid(this).name() << "" entry\n"";
[vALUE][->]        }
[->]    }
[->]    virtual bool EventProc( Context* pContext, Statemachine* pStm, EventId nEventId, EventParams* pParams ){
[->]        bool bResult = false;
[->]        pStm->m_pSourceState = TThisState::GetInstance();
","[->]    switch( nEventId ){
[->]    case [nAME]:{
","[->]    } break;
[->]    case [nAME]:{
","[->]    } break;
[->]    default: break;
[->]    }
","[->]        return bResult;
[->]    }
[->]    virtual void Exit(Context* pContext, Statemachine* pStm) {
[->]        if (pStm->IsExitable<TThisState>()) {
[vALUE][->]            std::cout << typeid(this).name() << "" exit\n"";
[->]        }
[->]    }
[->]};
"
branch,"[->]    else {
","[->]    if ([nAME]) {
","[->]    } else if ([nAME]) {
","[->]    } else {
","[->]    }
"
comment,/**< [nAME] [->32]*/," * [nAME]
"," * [nAME]
","/**
"," */
"
action,"[->][NAME]_PARAMS* pParams = ( [NAME]_PARAMS* )pParams;
","[->][nAME]
","[->][nAME]
","[->]    pStm->BgnTrans( pContext, [nAME]::GetInstance() );
[mODIFIER][->]    pStm->EndTrans( pContext );
[->]    bResult = true;
","[mODIFIER][->]    bResult = true;
"
param_dir,,,,0,/
inheritance,public [tYPE],public [nAME],", public [nAME]",: ,", "
template,template<[nAME]>,[nAME][mODIFIER],", [nAME][mODIFIER]",typename [nAME] [vALUE],[tYPE]* [nAME] [vALUE]
statemachine,"#include ""Generic/Statemachine.h""
","    [tYPE][mODIFIER] mainStm;[->64][dESC]
",,"[->]class [Name]: public Statemachine {
[->]public:
[->]    class [tYPE]: public TopState{ using TThisState = [tYPE];
[->]        public: static TopState* GetInstance() { static TThisState singleInstance; return &singleInstance; }
[->]    };
","[->]};
"
default_trans,"[->]virtual bool DefaultTrans( Context* pContext ){
[->]    bool bResult = false;
[->]    Statemachine* pStm = this;
","[->]do {
[->]    if (m_pCurrentState == [mODIFIER]::GetInstance() && m_pPseudostate == [sCOPE]::[nAME]::GetInstance()) {
","[->]    } else if (m_pCurrentState == [mODIFIER]::GetInstance() && m_pPseudostate == [cONTAINER]::[nAME]::GetInstance()) {
","[->]    } else if (m_pCurrentState != m_pPseudostate && dynamic_cast<[nAME]*>(m_pPseudostate) != NULL) {
[->]        pStm->BgnTrans( pContext, dynamic_cast<TopState*>(m_pPseudostate) );
[->]        pStm->EndTrans( pContext );
[->]        bResult = true;
[->]    } else {
[->]    }
[->]} while (false);
","[->]    return bResult;
[->]}
"
substm_impl,"[->]    if (!(([cONTAINER]*)pStm)->m_[nAME][sCOPE].IsInRecur<[mODIFIER]::[vALUE]>()) { break; }
","[->]    if( !m_[nAME][tYPE].IsFinished() ){ break; }
","[->]bResult |= m_[nAME][tYPE].EventProc( pContext, nEventId, pParams );
","[->]    (([sCOPE]*)pStm)->m_[nAME][tYPE].Reset( pContext, pStm, nullptr );
","[->]    (([sCOPE]*)pStm)->m_[nAME][tYPE].Abort( pContext );
"
substm_decl,,"[->][tYPE][mODIFIER] m_[nAME][tYPE];[->64][dESC]
","[->]bResult |= m_[nAME][tYPE].DefaultTrans( pContext );
","[->]    pStm->m_pParentStm->m_pPseudostate = [sCOPE]::[vALUE]::GetInstance();
","[->]    (([cONTAINER]*)pStm)->m_[nAME][sCOPE].Reset(pContext, pStm, [mODIFIER]::[vALUE]::GetInstance());
"
history,"[->]TopState* m_p[Name]History;
","[->]m_p[Name]History( nullptr ),\
","[->]    (([sCOPE]*)pStm)->m_p[Name]History = [vALUE]::GetInstance();
","[->]    if (( ( [sCOPE]* )pStm )->m_p[nAME]History) {
[->]        pStm->BgnTrans( pContext, ( ( [sCOPE]* )pStm )->m_p[nAME]History );
[mODIFIER][->]        pStm->EndTrans( pContext );
[->]        bResult = true;
[->]        break;
[->]    }
","[->]    pStm->BgnTrans( pContext, [cONTAINER]::GetInstance(), [nAME]::GetInstance() );
[mODIFIER][->]    pStm->EndTrans( pContext );
[->]    bResult = true;
"
junction,"[->]    pStm->m_pPseudostate = [sCOPE]::[vALUE]::GetInstance();
","[->]do {
[->]    if (m_pPseudostate == [sCOPE]::[nAME]::GetInstance()) {
","[->]    } else if (m_pPseudostate == [cONTAINER]::[nAME]::GetInstance()) {
",(([tYPE]*)pContext)->IsIn<[mODIFIER]::[vALUE]>(),"
[->] || (([tYPE]*)pContext)->IsIn<[mODIFIER]::[vALUE]>()"
api_call,"public:
    bool Start() {
        mainStm.Abort(this);
        return mainStm.Reset(this, nullptr, nullptr);
    }
    bool EventProc(EventId nEventId, EventParams* pParams) {
        return mainStm.EventProc(this, nEventId, pParams);
    }
    template<class TState>
    bool IsIn() {
        return mainStm.IsInRecur<TState>();
    }
","[->]    pStm->m_bIsExternTrans = true;
","[->]    if (m_[nAME][tYPE].IsInRecur<TCompositeState>()) { return true; }
","[->]        m_[nAME][sCOPE].Reset( pContext, this, pEntryPoint );
","::
"
friend,,,"[->]friend class [nAME];
",,
visibility,public: ,,protected: ,public: ,private: 
