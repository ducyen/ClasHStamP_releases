/* File generated by Đức's ClasHStamP */
using System;                                                   
using System.Collections.Generic;
using boolean = System.Boolean;
using Model;
using Base;
namespace Model {
    public  class Sensor: Context
    {
        public int getData(
        ){
            Console.WriteLine("x = getData();");
            return x;
        } /* Sensor.getData */
        public void doLongComputationOnData(
            int _x
        ){
            Console.WriteLine("doLongComputationOnData(" + x + ")");
        } /* Sensor.doLongComputationOnData */
        public void doEvenMoreProcessing(
        ){
            Console.WriteLine("doEvenMoreProcessing");
        } /* Sensor.doEvenMoreProcessing */
        public enum _EventId {
            evClearDataLatch,
            evDataComplete,
            evDataReady,
            evHasNewData,
            evSensorReset,
            tm_100,
            SensorEventNum
        };
        class LatchStm: Statemachine {
            public class LatchTop: TopState {
                private static TopState singleInstance = new LatchTop();
                public static new TopState GetInstance() { return singleInstance; }
            }
            public class InitPt: Pseudostate<InitPt>{};
            public class NoData: LatchTop {
                private static TopState singleInstance = new NoData();
                public static new TopState GetInstance() { return singleInstance; }
                public override void Entry(Context pContext, Statemachine pStm){
                    if( pStm.IsEnterable(GetInstance()) ){
                        Console.WriteLine(GetInstance().GetType() + "entry");
                    }
                }
                public override bool EventProc( Context pContext, Statemachine pStm, int nEventId, EventParams pParams ){
                    bool bResult = false;
                    pStm.m_pSourceState = GetInstance();
                    switch( (_EventId)nEventId ){
                    case _EventId.evHasNewData:{
                        pStm.BgnTrans( pContext, HasNewData.GetInstance() );
                        pStm.EndTrans( pContext );
                        bResult = true;
                    } break;
                    default: break;
                    }
                    return bResult;
                }
                public override void Exit(Context pContext, Statemachine pStm) {
                    if (pStm.IsExitable(GetInstance())) {
                        Console.WriteLine(GetInstance().GetType() + "exit");
                    }
                }
            };
            public class HasNewData: LatchTop {
                private static TopState singleInstance = new HasNewData();
                public static new TopState GetInstance() { return singleInstance; }
                public override void Entry(Context pContext, Statemachine pStm){
                    if( pStm.IsEnterable(GetInstance()) ){
                        Console.WriteLine(GetInstance().GetType() + "entry");
                    }
                }
                public override bool EventProc( Context pContext, Statemachine pStm, int nEventId, EventParams pParams ){
                    bool bResult = false;
                    pStm.m_pSourceState = GetInstance();
                    switch( (_EventId)nEventId ){
                    case _EventId.evClearDataLatch:{
                        pStm.BgnTrans( pContext, NoData.GetInstance() );
                        pStm.EndTrans( pContext );
                        bResult = true;
                    } break;
                    default: break;
                    }
                    return bResult;
                }
                public override void Exit(Context pContext, Statemachine pStm) {
                    if (pStm.IsExitable(GetInstance())) {
                        Console.WriteLine(GetInstance().GetType() + "exit");
                    }
                }
            };
            public override bool DefaultTrans( Context pContext ){
                bool bResult = false;
                Statemachine pStm = this;
                do {
                    if (m_pCurrentState == LatchTop.GetInstance() && m_pPseudostate == LatchStm.InitPt.GetInstance()) {
                        pStm.BgnTrans( pContext, NoData.GetInstance() );
                        pStm.EndTrans( pContext );
                        bResult = true;
                    } else if (m_pCurrentState != m_pPseudostate && m_pPseudostate is LatchTop) {
                        pStm.BgnTrans( pContext, m_pPseudostate as TopState );
                        pStm.EndTrans( pContext );
                    } else {
                    }
                } while (false);
                return bResult;
            }
            public override bool Reset(Context pContext, Statemachine pParentStm, Pseudostate pEntryPoint) {
                m_pParentStm = pParentStm;
                if (pEntryPoint == null) {
                    if (IsFinished()) {
                        m_pPseudostate = InitPt.GetInstance();
                    }
                } else {
                    if (IsFinished()) {
                        m_pPseudostate = pEntryPoint;
                        return false;
                    } else {
                        m_pPseudostate = pEntryPoint;
                    }                    
                }
                if (pEntryPoint != null) {
                }
                return RunToCompletion(pContext);
            }
            public override bool EventProc(Context pContext, int nEventId, EventParams pParams){
                bool bResult = false;
                m_pLCAState = TopState.GetInstance();
                bResult |= m_pCurrentState.EventProc(pContext, this, nEventId, pParams);
                RunToCompletion(pContext);
                return bResult;
            }
            public override bool IsIn(TopState pCompositeState) {
                if (base.IsIn(pCompositeState)) { return true; }
                return false;
            }
            public override bool Abort(Context pContext) {
                m_pSourceState = LatchTop.GetInstance();
                BgnTrans(pContext, LatchTop.GetInstance());
                EndTrans(pContext);
                return true;
            }
            public override bool IsFinished() {
                return m_pCurrentState == LatchTop.GetInstance() && m_pCurrentState == m_pPseudostate;
            }
            public LatchStm(): base(LatchTop.GetInstance(), LatchTop.GetInstance()) {}
        };
        class DepedentStm: Statemachine {
            public class DependentTop: TopState {
                private static TopState singleInstance = new DependentTop();
                public static new TopState GetInstance() { return singleInstance; }
            }
            LatchStm m_LatchLatchStm = new LatchStm();          
            public class InitPt: Pseudostate<InitPt>{};
            public class Dependent: DependentTop {
                private static TopState singleInstance = new Dependent();
                public static new TopState GetInstance() { return singleInstance; }
                public override void Entry(Context pContext, Statemachine pStm){
                    if( pStm.IsEnterable(GetInstance()) ){
                        Console.WriteLine(GetInstance().GetType() + "entry");
                        ((DepedentStm)pStm).m_LatchLatchStm.Reset( pContext, pStm, null );
                    }
                }
                public override bool EventProc( Context pContext, Statemachine pStm, int nEventId, EventParams pParams ){
                    bool bResult = false;
                    pStm.m_pSourceState = GetInstance();
                    return bResult;
                }
                public override void Exit(Context pContext, Statemachine pStm) {
                    if (pStm.IsExitable(GetInstance())) {
                        ((DepedentStm)pStm).m_LatchLatchStm.Abort( pContext );
                        Console.WriteLine(GetInstance().GetType() + "exit");
                    }
                }
            };
            public class ProcessingData: Dependent {
                private static TopState singleInstance = new ProcessingData();
                public static new TopState GetInstance() { return singleInstance; }
                public override void Entry(Context pContext, Statemachine pStm){
                    if( pStm.IsEnterable(GetInstance()) ){
                        base.Entry( pContext, pStm );
                        Console.WriteLine(GetInstance().GetType() + "entry");
                        DisplayMsg("doLongComputationOnData(((Sensor)pContext).x);");
                    }
                }
                public override bool EventProc( Context pContext, Statemachine pStm, int nEventId, EventParams pParams ){
                    bool bResult = false;
                    pStm.m_pSourceState = GetInstance();
                    return bResult ? bResult : base.EventProc( pContext, pStm, nEventId, pParams );
                }
                public override void Exit(Context pContext, Statemachine pStm) {
                    if (pStm.IsExitable(GetInstance())) {
                        Console.WriteLine(GetInstance().GetType() + "exit");
                        base.Exit(pContext, pStm);
                    }
                }
            };
            public class MoreProcessing: Dependent {
                private static TopState singleInstance = new MoreProcessing();
                public static new TopState GetInstance() { return singleInstance; }
                public override void Entry(Context pContext, Statemachine pStm){
                    if( pStm.IsEnterable(GetInstance()) ){
                        base.Entry( pContext, pStm );
                        Console.WriteLine(GetInstance().GetType() + "entry");
                        DisplayMsg("doEvenMoreProcessing();");
                    }
                }
                public override bool EventProc( Context pContext, Statemachine pStm, int nEventId, EventParams pParams ){
                    bool bResult = false;
                    pStm.m_pSourceState = GetInstance();
                    return bResult ? bResult : base.EventProc( pContext, pStm, nEventId, pParams );
                }
                public override void Exit(Context pContext, Statemachine pStm) {
                    if (pStm.IsExitable(GetInstance())) {
                        Console.WriteLine(GetInstance().GetType() + "exit");
                        base.Exit(pContext, pStm);
                    }
                }
            };
            public class ReadyToProcessData: Dependent {
                private static TopState singleInstance = new ReadyToProcessData();
                public static new TopState GetInstance() { return singleInstance; }
                public override void Entry(Context pContext, Statemachine pStm){
                    if( pStm.IsEnterable(GetInstance()) ){
                        base.Entry( pContext, pStm );
                        Console.WriteLine(GetInstance().GetType() + "entry");
                    }
                }
                public override bool EventProc( Context pContext, Statemachine pStm, int nEventId, EventParams pParams ){
                    bool bResult = false;
                    pStm.m_pSourceState = GetInstance();
                    switch( (_EventId)nEventId ){
                    case _EventId.tm_100:{
                        if (((Sensor)pContext).IsIn(LatchStm.HasNewData.GetInstance())) {
                            pStm.BgnTrans( pContext, ProcessingData.GetInstance() );
                            ((DepedentStm)pStm).m_LatchLatchStm.Reset(pContext, pStm, LatchStm.NoData.GetInstance());
                            pStm.EndTrans( pContext );
                            bResult = true;
                        }
                        else {
                            pStm.m_bIsExternTrans = true;
                            pStm.BgnTrans( pContext, ReadyToProcessData.GetInstance() );
                            pStm.EndTrans( pContext );
                            bResult = true;
                        }
                    } break;
                    default: break;
                    }
                    return bResult ? bResult : base.EventProc( pContext, pStm, nEventId, pParams );
                }
                public override void Exit(Context pContext, Statemachine pStm) {
                    if (pStm.IsExitable(GetInstance())) {
                        Console.WriteLine(GetInstance().GetType() + "exit");
                        base.Exit(pContext, pStm);
                    }
                }
            };
            public override bool DefaultTrans( Context pContext ){
                bool bResult = false;
                Statemachine pStm = this;
                bResult |= m_LatchLatchStm.DefaultTrans( pContext );
                do {
                    if (m_pCurrentState == Dependent.GetInstance() && m_pPseudostate == DepedentStm.InitPt.GetInstance()) {
                        pStm.BgnTrans( pContext, ReadyToProcessData.GetInstance() );
                        pStm.EndTrans( pContext );
                        bResult = true;
                    } else if (m_pPseudostate == DepedentStm.ProcessingData.GetInstance()) {
                        pStm.BgnTrans( pContext, MoreProcessing.GetInstance() );
                        pStm.EndTrans( pContext );
                        bResult = true;
                    } else if (m_pPseudostate == DepedentStm.MoreProcessing.GetInstance()) {
                        pStm.BgnTrans( pContext, ReadyToProcessData.GetInstance() );
                        pStm.EndTrans( pContext );
                        bResult = true;
                    } else if (m_pCurrentState == DependentTop.GetInstance() && m_pPseudostate == DepedentStm.InitPt.GetInstance()) {
                        pStm.BgnTrans( pContext, Dependent.GetInstance(), InitPt.GetInstance() );
                        pStm.EndTrans( pContext );
                        bResult = true;
                    } else if (m_pCurrentState != m_pPseudostate && m_pPseudostate is DependentTop) {
                        pStm.BgnTrans( pContext, m_pPseudostate as TopState );
                        pStm.EndTrans( pContext );
                    } else {
                    }
                } while (false);
                return bResult;
            }
            public override bool Reset(Context pContext, Statemachine pParentStm, Pseudostate pEntryPoint) {
                m_pParentStm = pParentStm;
                if (pEntryPoint == null) {
                    if (IsFinished()) {
                        m_pPseudostate = InitPt.GetInstance();
                    }
                } else {
                    if (IsFinished()) {
                        m_pPseudostate = pEntryPoint;
                        return false;
                    } else {
                        m_pPseudostate = pEntryPoint;
                    }                    
                }
                if (pEntryPoint != null) {
                    m_LatchLatchStm.Reset( pContext, this, pEntryPoint );
                }
                return RunToCompletion(pContext);
            }
            public override bool EventProc(Context pContext, int nEventId, EventParams pParams){
                bool bResult = false;
                m_pLCAState = TopState.GetInstance();
                bResult |= m_LatchLatchStm.EventProc( pContext, nEventId, pParams );
                bResult |= m_pCurrentState.EventProc(pContext, this, nEventId, pParams);
                RunToCompletion(pContext);
                return bResult;
            }
            public override bool IsIn(TopState pCompositeState) {
                if (m_LatchLatchStm.IsIn(pCompositeState)) { return true; }
                if (base.IsIn(pCompositeState)) { return true; }
                return false;
            }
            public override bool Abort(Context pContext) {
                m_pSourceState = DependentTop.GetInstance();
                BgnTrans(pContext, DependentTop.GetInstance());
                EndTrans(pContext);
                return true;
            }
            public override bool IsFinished() {
                return m_pCurrentState == DependentTop.GetInstance() && m_pCurrentState == m_pPseudostate;
            }
            public DepedentStm(): base(DependentTop.GetInstance(), DependentTop.GetInstance()) {}
        };
        class PredicateStm: Statemachine {
            public class PredicateTop: TopState {
                private static TopState singleInstance = new PredicateTop();
                public static new TopState GetInstance() { return singleInstance; }
            }
            DepedentStm m_DependentDepedentStm = new DepedentStm();
            public class InitPt: Pseudostate<InitPt>{};
            public class SensorActive: PredicateTop {
                private static TopState singleInstance = new SensorActive();
                public static new TopState GetInstance() { return singleInstance; }
                public override void Entry(Context pContext, Statemachine pStm){
                    if( pStm.IsEnterable(GetInstance()) ){
                        Console.WriteLine(GetInstance().GetType() + "entry");
                        ((PredicateStm)pStm).m_DependentDepedentStm.Reset( pContext, pStm, null );
                    }
                }
                public override bool EventProc( Context pContext, Statemachine pStm, int nEventId, EventParams pParams ){
                    bool bResult = false;
                    pStm.m_pSourceState = GetInstance();
                    return bResult;
                }
                public override void Exit(Context pContext, Statemachine pStm) {
                    if (pStm.IsExitable(GetInstance())) {
                        ((PredicateStm)pStm).m_DependentDepedentStm.Abort( pContext );
                        Console.WriteLine(GetInstance().GetType() + "exit");
                    }
                }
            };
            public class WaitingForData: SensorActive {
                private static TopState singleInstance = new WaitingForData();
                public static new TopState GetInstance() { return singleInstance; }
                public override void Entry(Context pContext, Statemachine pStm){
                    if( pStm.IsEnterable(GetInstance()) ){
                        base.Entry( pContext, pStm );
                        Console.WriteLine(GetInstance().GetType() + "entry");
                    }
                }
                public override bool EventProc( Context pContext, Statemachine pStm, int nEventId, EventParams pParams ){
                    bool bResult = false;
                    pStm.m_pSourceState = GetInstance();
                    switch( (_EventId)nEventId ){
                    case _EventId.evDataReady:{
                        DisplayMsg("x = .getData();");
                        if (((Sensor)pContext).IsIn(LatchStm.NoData.GetInstance())) {
                            pStm.BgnTrans( pContext, DataReady.GetInstance() );
                            ((PredicateStm)pStm).m_DependentDepedentStm.Reset(pContext, pStm, LatchStm.HasNewData.GetInstance());
                            pStm.EndTrans( pContext );
                            bResult = true;
                        }
                        else {
                            pStm.BgnTrans( pContext, DataReady.GetInstance() );
                            pStm.EndTrans( pContext );
                            bResult = true;
                        }
                    } break;
                    default: break;
                    }
                    return bResult ? bResult : base.EventProc( pContext, pStm, nEventId, pParams );
                }
                public override void Exit(Context pContext, Statemachine pStm) {
                    if (pStm.IsExitable(GetInstance())) {
                        Console.WriteLine(GetInstance().GetType() + "exit");
                        base.Exit(pContext, pStm);
                    }
                }
            };
            public class DataReady: SensorActive {
                private static TopState singleInstance = new DataReady();
                public static new TopState GetInstance() { return singleInstance; }
                public override void Entry(Context pContext, Statemachine pStm){
                    if( pStm.IsEnterable(GetInstance()) ){
                        base.Entry( pContext, pStm );
                        Console.WriteLine(GetInstance().GetType() + "entry");
                    }
                }
                public override bool EventProc( Context pContext, Statemachine pStm, int nEventId, EventParams pParams ){
                    bool bResult = false;
                    pStm.m_pSourceState = GetInstance();
                    switch( (_EventId)nEventId ){
                    case _EventId.evDataComplete:{
                        pStm.BgnTrans( pContext, ResetingSensor.GetInstance() );
                        pStm.EndTrans( pContext );
                        bResult = true;
                    } break;
                    default: break;
                    }
                    return bResult ? bResult : base.EventProc( pContext, pStm, nEventId, pParams );
                }
                public override void Exit(Context pContext, Statemachine pStm) {
                    if (pStm.IsExitable(GetInstance())) {
                        Console.WriteLine(GetInstance().GetType() + "exit");
                        base.Exit(pContext, pStm);
                    }
                }
            };
            public class ResetingSensor: SensorActive {
                private static TopState singleInstance = new ResetingSensor();
                public static new TopState GetInstance() { return singleInstance; }
                public override void Entry(Context pContext, Statemachine pStm){
                    if( pStm.IsEnterable(GetInstance()) ){
                        base.Entry( pContext, pStm );
                        Console.WriteLine(GetInstance().GetType() + "entry");
                    }
                }
                public override bool EventProc( Context pContext, Statemachine pStm, int nEventId, EventParams pParams ){
                    bool bResult = false;
                    pStm.m_pSourceState = GetInstance();
                    switch( (_EventId)nEventId ){
                    case _EventId.evSensorReset:{
                        pStm.BgnTrans( pContext, WaitingForData.GetInstance() );
                        pStm.EndTrans( pContext );
                        bResult = true;
                    } break;
                    default: break;
                    }
                    return bResult ? bResult : base.EventProc( pContext, pStm, nEventId, pParams );
                }
                public override void Exit(Context pContext, Statemachine pStm) {
                    if (pStm.IsExitable(GetInstance())) {
                        Console.WriteLine(GetInstance().GetType() + "exit");
                        base.Exit(pContext, pStm);
                    }
                }
            };
            public override bool DefaultTrans( Context pContext ){
                bool bResult = false;
                Statemachine pStm = this;
                bResult |= m_DependentDepedentStm.DefaultTrans( pContext );
                do {
                    if (m_pCurrentState == SensorActive.GetInstance() && m_pPseudostate == PredicateStm.InitPt.GetInstance()) {
                        pStm.BgnTrans( pContext, WaitingForData.GetInstance() );
                        pStm.EndTrans( pContext );
                        bResult = true;
                    } else if (m_pCurrentState == PredicateTop.GetInstance() && m_pPseudostate == PredicateStm.InitPt.GetInstance()) {
                        pStm.BgnTrans( pContext, SensorActive.GetInstance(), InitPt.GetInstance() );
                        pStm.EndTrans( pContext );
                        bResult = true;
                    } else if (m_pCurrentState != m_pPseudostate && m_pPseudostate is PredicateTop) {
                        pStm.BgnTrans( pContext, m_pPseudostate as TopState );
                        pStm.EndTrans( pContext );
                    } else {
                    }
                } while (false);
                return bResult;
            }
            public override bool Reset(Context pContext, Statemachine pParentStm, Pseudostate pEntryPoint) {
                m_pParentStm = pParentStm;
                if (pEntryPoint == null) {
                    if (IsFinished()) {
                        m_pPseudostate = InitPt.GetInstance();
                    }
                } else {
                    if (IsFinished()) {
                        m_pPseudostate = pEntryPoint;
                        return false;
                    } else {
                        m_pPseudostate = pEntryPoint;
                    }                    
                }
                if (pEntryPoint != null) {
                    m_DependentDepedentStm.Reset( pContext, this, pEntryPoint );
                }
                return RunToCompletion(pContext);
            }
            public override bool EventProc(Context pContext, int nEventId, EventParams pParams){
                bool bResult = false;
                m_pLCAState = TopState.GetInstance();
                bResult |= m_DependentDepedentStm.EventProc( pContext, nEventId, pParams );
                bResult |= m_pCurrentState.EventProc(pContext, this, nEventId, pParams);
                RunToCompletion(pContext);
                return bResult;
            }
            public override bool IsIn(TopState pCompositeState) {
                if (m_DependentDepedentStm.IsIn(pCompositeState)) { return true; }
                if (base.IsIn(pCompositeState)) { return true; }
                return false;
            }
            public override bool Abort(Context pContext) {
                m_pSourceState = PredicateTop.GetInstance();
                BgnTrans(pContext, PredicateTop.GetInstance());
                EndTrans(pContext);
                return true;
            }
            public override bool IsFinished() {
                return m_pCurrentState == PredicateTop.GetInstance() && m_pCurrentState == m_pPseudostate;
            }
            public PredicateStm(): base(PredicateTop.GetInstance(), PredicateTop.GetInstance()) {}
        };
        public  Sensor(
            int _attribute0
        ):  base( _attribute0 )
        {
            x = 0;
        }                                                                                       
        private int x;                                          
        PredicateStm mainStm = new PredicateStm();              
        public bool Start() {
            mainStm.Abort(this);
            return mainStm.Reset(this, null, null);
        }
        public bool EventProc(int nEventId, EventParams pParams) {
            return mainStm.EventProc(this, nEventId, pParams);
        }
        public bool IsIn(TopState pState) {
            return mainStm.IsIn(pState);
        }
    }
}
