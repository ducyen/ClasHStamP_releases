/* File generated by Đức's ClasHStamP */
using System;                                                   
using System.Collections.Generic;
using boolean = System.Boolean;
using Model;
using Base;
namespace Model {
    public  class AirspeedSensor: Context
    {
        public enum _EventId {
            evDataReady,
            evDisablePolling,
            evEnablePolling,
            evFinish,
            evStart,
            evStop,
            tm_POLLTIME,
            AirspeedSensorEventNum
        };
        class PollingRegionStm: Statemachine {
            public class PollingRegionTop: TopState {
                private static TopState singleInstance = new PollingRegionTop();
                public static new TopState GetInstance() { return singleInstance; }
            }
            public class InitialPseudostate0: Pseudostate<InitialPseudostate0>{};
            public class NotAcquiring: PollingRegionTop {
                private static TopState singleInstance = new NotAcquiring();
                public static new TopState GetInstance() { return singleInstance; }
                public override void Entry(Context pContext, Statemachine pStm){
                    if( pStm.IsEnterable(GetInstance()) ){
                        Console.WriteLine(GetInstance().GetType() + "entry");
                    }
                }
                public override bool EventProc( Context pContext, Statemachine pStm, int nEventId, EventParams pParams ){
                    bool bResult = false;
                    pStm.m_pSourceState = GetInstance();
                    switch( (_EventId)nEventId ){
                    case _EventId.evEnablePolling:{
                        pStm.BgnTrans( pContext, WaitingToAcquire.GetInstance() );
                        pStm.EndTrans( pContext );
                        bResult = true;
                    } break;
                    default: break;
                    }
                    return bResult;
                }
                public override void Exit(Context pContext, Statemachine pStm) {
                    if (pStm.IsExitable(GetInstance())) {
                        Console.WriteLine(GetInstance().GetType() + "exit");
                    }
                }
            };
            public class WaitingToAcquire: PollingRegionTop {
                private static TopState singleInstance = new WaitingToAcquire();
                public static new TopState GetInstance() { return singleInstance; }
                public override void Entry(Context pContext, Statemachine pStm){
                    if( pStm.IsEnterable(GetInstance()) ){
                        Console.WriteLine(GetInstance().GetType() + "entry");
                    }
                }
                public override bool EventProc( Context pContext, Statemachine pStm, int nEventId, EventParams pParams ){
                    bool bResult = false;
                    pStm.m_pSourceState = GetInstance();
                    switch( (_EventId)nEventId ){
                    case _EventId.evDisablePolling:{
                        pStm.BgnTrans( pContext, NotAcquiring.GetInstance() );
                        pStm.EndTrans( pContext );
                        bResult = true;
                    } break;
                    case _EventId.tm_POLLTIME:{
                        if (((AirspeedSensor)pContext).IsIn(AirspeedSensorStm.Idle.GetInstance())) {
                            pStm.m_bIsExternTrans = true;
                            pStm.BgnTrans( pContext, WaitingToAcquire.GetInstance() );
                            pStm.m_pParentStm.m_pPseudostate = AirspeedSensorStm.CrunchingData.GetInstance();
                            pStm.EndTrans( pContext );
                            bResult = true;
                        }
                        else {
                            pStm.m_bIsExternTrans = true;
                            pStm.BgnTrans( pContext, WaitingToAcquire.GetInstance() );
                            pStm.EndTrans( pContext );
                            bResult = true;
                        }
                    } break;
                    default: break;
                    }
                    return bResult;
                }
                public override void Exit(Context pContext, Statemachine pStm) {
                    if (pStm.IsExitable(GetInstance())) {
                        Console.WriteLine(GetInstance().GetType() + "exit");
                    }
                }
            };
            public override bool DefaultTrans( Context pContext ){
                bool bResult = false;
                Statemachine pStm = this;
                do {
                    if (m_pCurrentState == PollingRegionTop.GetInstance() && m_pPseudostate == PollingRegionStm.InitialPseudostate0.GetInstance()) {
                        pStm.BgnTrans( pContext, NotAcquiring.GetInstance() );
                        pStm.EndTrans( pContext );
                        bResult = true;
                    } else if (m_pCurrentState != m_pPseudostate && m_pPseudostate is PollingRegionTop) {
                        pStm.BgnTrans( pContext, m_pPseudostate as TopState );
                        pStm.EndTrans( pContext );
                    } else {
                    }
                } while (false);
                return bResult;
            }
            public override bool Reset(Context pContext, Statemachine pParentStm, Pseudostate pEntryPoint) {
                m_pParentStm = pParentStm;
                if (pEntryPoint == null) {
                    if (IsFinished()) {
                        m_pPseudostate = InitialPseudostate0.GetInstance();
                    }
                } else {
                    if (IsFinished()) {
                        m_pPseudostate = pEntryPoint;
                        return false;
                    } else {
                        m_pPseudostate = pEntryPoint;
                    }                    
                }
                if (pEntryPoint != null) {
                }
                return RunToCompletion(pContext);
            }
            public override bool EventProc(Context pContext, int nEventId, EventParams pParams){
                bool bResult = false;
                m_pLCAState = TopState.GetInstance();
                bResult |= m_pCurrentState.EventProc(pContext, this, nEventId, pParams);
                RunToCompletion(pContext);
                return bResult;
            }
            public override bool IsIn(TopState pCompositeState) {
                if (base.IsIn(pCompositeState)) { return true; }
                return false;
            }
            public override bool Abort(Context pContext) {
                m_pSourceState = PollingRegionTop.GetInstance();
                BgnTrans(pContext, PollingRegionTop.GetInstance());
                EndTrans(pContext);
                return true;
            }
            public override bool IsFinished() {
                return m_pCurrentState == PollingRegionTop.GetInstance() && m_pCurrentState == m_pPseudostate;
            }
            public PollingRegionStm(): base(PollingRegionTop.GetInstance(), PollingRegionTop.GetInstance()) {}
        };
        class AirspeedSensorStm: Statemachine {
            public class AirspeedSensorTop: TopState {
                private static TopState singleInstance = new AirspeedSensorTop();
                public static new TopState GetInstance() { return singleInstance; }
            }
            PollingRegionStm m_PollingRegionPollingRegionStm = new PollingRegionStm();
            public class InitPt1: Pseudostate<InitPt1>{};
            public class InitialPseudostate1: Pseudostate<InitialPseudostate1>{};
            public class DataHandlingRegion: AirspeedSensorTop {
                private static TopState singleInstance = new DataHandlingRegion();
                public static new TopState GetInstance() { return singleInstance; }
                public override void Entry(Context pContext, Statemachine pStm){
                    if( pStm.IsEnterable(GetInstance()) ){
                        Console.WriteLine(GetInstance().GetType() + "entry");
                        ((AirspeedSensorStm)pStm).m_PollingRegionPollingRegionStm.Reset( pContext, pStm, null );
                    }
                }
                public override bool EventProc( Context pContext, Statemachine pStm, int nEventId, EventParams pParams ){
                    bool bResult = false;
                    pStm.m_pSourceState = GetInstance();
                    return bResult;
                }
                public override void Exit(Context pContext, Statemachine pStm) {
                    if (pStm.IsExitable(GetInstance())) {
                        ((AirspeedSensorStm)pStm).m_PollingRegionPollingRegionStm.Abort( pContext );
                        Console.WriteLine(GetInstance().GetType() + "exit");
                    }
                }
            };
            public class Inactive: DataHandlingRegion {
                private static TopState singleInstance = new Inactive();
                public static new TopState GetInstance() { return singleInstance; }
                public override void Entry(Context pContext, Statemachine pStm){
                    if( pStm.IsEnterable(GetInstance()) ){
                        base.Entry( pContext, pStm );
                        Console.WriteLine(GetInstance().GetType() + "entry");
                    }
                }
                public override bool EventProc( Context pContext, Statemachine pStm, int nEventId, EventParams pParams ){
                    bool bResult = false;
                    pStm.m_pSourceState = GetInstance();
                    switch( (_EventId)nEventId ){
                    case _EventId.evStart:{
                        if (((AirspeedSensor)pContext).IsIn(PollingRegionStm.NotAcquiring.GetInstance())) {
                            pStm.BgnTrans( pContext, Active.GetInstance(), InitialPseudostate1.GetInstance() );
                            ((AirspeedSensorStm)pStm).m_PollingRegionPollingRegionStm.Reset(pContext, pStm, PollingRegionStm.WaitingToAcquire.GetInstance());
                            pStm.EndTrans( pContext );
                            bResult = true;
                        }
                        else {
                            pStm.BgnTrans( pContext, Active.GetInstance(), InitialPseudostate1.GetInstance() );
                            pStm.EndTrans( pContext );
                            bResult = true;
                        }
                    } break;
                    default: break;
                    }
                    return bResult ? bResult : base.EventProc( pContext, pStm, nEventId, pParams );
                }
                public override void Exit(Context pContext, Statemachine pStm) {
                    if (pStm.IsExitable(GetInstance())) {
                        Console.WriteLine(GetInstance().GetType() + "exit");
                        base.Exit(pContext, pStm);
                    }
                }
            };
            public class Active: DataHandlingRegion {
                private static TopState singleInstance = new Active();
                public static new TopState GetInstance() { return singleInstance; }
                public override void Entry(Context pContext, Statemachine pStm){
                    if( pStm.IsEnterable(GetInstance()) ){
                        base.Entry( pContext, pStm );
                        Console.WriteLine(GetInstance().GetType() + "entry");
                    }
                }
                public override bool EventProc( Context pContext, Statemachine pStm, int nEventId, EventParams pParams ){
                    bool bResult = false;
                    pStm.m_pSourceState = GetInstance();
                    switch( (_EventId)nEventId ){
                    case _EventId.evStop:{
                        if (((AirspeedSensor)pContext).IsIn(PollingRegionStm.WaitingToAcquire.GetInstance())) {
                            pStm.BgnTrans( pContext, Inactive.GetInstance() );
                            ((AirspeedSensorStm)pStm).m_PollingRegionPollingRegionStm.Reset(pContext, pStm, PollingRegionStm.NotAcquiring.GetInstance());
                            pStm.EndTrans( pContext );
                            bResult = true;
                        }
                        else {
                            pStm.BgnTrans( pContext, Inactive.GetInstance() );
                            pStm.EndTrans( pContext );
                            bResult = true;
                        }
                    } break;
                    default: break;
                    }
                    return bResult ? bResult : base.EventProc( pContext, pStm, nEventId, pParams );
                }
                public override void Exit(Context pContext, Statemachine pStm) {
                    if (pStm.IsExitable(GetInstance())) {
                        Console.WriteLine(GetInstance().GetType() + "exit");
                        base.Exit(pContext, pStm);
                    }
                }
            };
            public class Idle: Active {
                private static TopState singleInstance = new Idle();
                public static new TopState GetInstance() { return singleInstance; }
                public override void Entry(Context pContext, Statemachine pStm){
                    if( pStm.IsEnterable(GetInstance()) ){
                        base.Entry( pContext, pStm );
                        Console.WriteLine(GetInstance().GetType() + "entry");
                    }
                }
                public override bool EventProc( Context pContext, Statemachine pStm, int nEventId, EventParams pParams ){
                    bool bResult = false;
                    pStm.m_pSourceState = GetInstance();
                    switch( (_EventId)nEventId ){
                    case _EventId.evDataReady:{
                        pStm.BgnTrans( pContext, CrunchingData.GetInstance() );
                        pStm.EndTrans( pContext );
                        bResult = true;
                    } break;
                    default: break;
                    }
                    return bResult ? bResult : base.EventProc( pContext, pStm, nEventId, pParams );
                }
                public override void Exit(Context pContext, Statemachine pStm) {
                    if (pStm.IsExitable(GetInstance())) {
                        Console.WriteLine(GetInstance().GetType() + "exit");
                        base.Exit(pContext, pStm);
                    }
                }
            };
            public class CrunchingData: Active {
                private static TopState singleInstance = new CrunchingData();
                public static new TopState GetInstance() { return singleInstance; }
                public override void Entry(Context pContext, Statemachine pStm){
                    if( pStm.IsEnterable(GetInstance()) ){
                        base.Entry( pContext, pStm );
                        Console.WriteLine(GetInstance().GetType() + "entry");
                    }
                }
                public override bool EventProc( Context pContext, Statemachine pStm, int nEventId, EventParams pParams ){
                    bool bResult = false;
                    pStm.m_pSourceState = GetInstance();
                    switch( (_EventId)nEventId ){
                    case _EventId.evFinish:{
                        pStm.BgnTrans( pContext, Idle.GetInstance() );
                        pStm.EndTrans( pContext );
                        bResult = true;
                    } break;
                    default: break;
                    }
                    return bResult ? bResult : base.EventProc( pContext, pStm, nEventId, pParams );
                }
                public override void Exit(Context pContext, Statemachine pStm) {
                    if (pStm.IsExitable(GetInstance())) {
                        Console.WriteLine(GetInstance().GetType() + "exit");
                        base.Exit(pContext, pStm);
                    }
                }
            };
            public override bool DefaultTrans( Context pContext ){
                bool bResult = false;
                Statemachine pStm = this;
                bResult |= m_PollingRegionPollingRegionStm.DefaultTrans( pContext );
                do {
                    if (m_pCurrentState == AirspeedSensorTop.GetInstance() && m_pPseudostate == AirspeedSensorStm.InitPt1.GetInstance()) {
                        pStm.BgnTrans( pContext, DataHandlingRegion.GetInstance(), InitPt1.GetInstance() );
                        pStm.EndTrans( pContext );
                        bResult = true;
                    } else if (m_pCurrentState == Active.GetInstance() && m_pPseudostate == AirspeedSensorStm.InitialPseudostate1.GetInstance()) {
                        pStm.BgnTrans( pContext, Idle.GetInstance() );
                        pStm.EndTrans( pContext );
                        bResult = true;
                    } else if (m_pCurrentState == DataHandlingRegion.GetInstance() && m_pPseudostate == AirspeedSensorStm.InitPt1.GetInstance()) {
                        pStm.BgnTrans( pContext, Inactive.GetInstance() );
                        pStm.EndTrans( pContext );
                        bResult = true;
                    } else if (m_pCurrentState != m_pPseudostate && m_pPseudostate is AirspeedSensorTop) {
                        pStm.BgnTrans( pContext, m_pPseudostate as TopState );
                        pStm.EndTrans( pContext );
                    } else {
                    }
                } while (false);
                return bResult;
            }
            public override bool Reset(Context pContext, Statemachine pParentStm, Pseudostate pEntryPoint) {
                m_pParentStm = pParentStm;
                if (pEntryPoint == null) {
                    if (IsFinished()) {
                        m_pPseudostate = InitPt1.GetInstance();
                    }
                } else {
                    if (IsFinished()) {
                        m_pPseudostate = pEntryPoint;
                        return false;
                    } else {
                        m_pPseudostate = pEntryPoint;
                    }                    
                }
                if (pEntryPoint != null) {
                    m_PollingRegionPollingRegionStm.Reset( pContext, this, pEntryPoint );
                }
                return RunToCompletion(pContext);
            }
            public override bool EventProc(Context pContext, int nEventId, EventParams pParams){
                bool bResult = false;
                m_pLCAState = TopState.GetInstance();
                bResult |= m_PollingRegionPollingRegionStm.EventProc( pContext, nEventId, pParams );
                bResult |= m_pCurrentState.EventProc(pContext, this, nEventId, pParams);
                RunToCompletion(pContext);
                return bResult;
            }
            public override bool IsIn(TopState pCompositeState) {
                if (m_PollingRegionPollingRegionStm.IsIn(pCompositeState)) { return true; }
                if (base.IsIn(pCompositeState)) { return true; }
                return false;
            }
            public override bool Abort(Context pContext) {
                m_pSourceState = AirspeedSensorTop.GetInstance();
                BgnTrans(pContext, AirspeedSensorTop.GetInstance());
                EndTrans(pContext);
                return true;
            }
            public override bool IsFinished() {
                return m_pCurrentState == AirspeedSensorTop.GetInstance() && m_pCurrentState == m_pPseudostate;
            }
            public AirspeedSensorStm(): base(AirspeedSensorTop.GetInstance(), AirspeedSensorTop.GetInstance()) {}
        };
        public  AirspeedSensor(
            int _attribute0
        ):  base( _attribute0 )
        {
        }                                                                                       
        AirspeedSensorStm mainStm = new AirspeedSensorStm();    
        public bool Start() {
            mainStm.Abort(this);
            return mainStm.Reset(this, null, null);
        }
        public bool EventProc(int nEventId, EventParams pParams) {
            return mainStm.EventProc(this, nEventId, pParams);
        }
        public bool IsIn(TopState pState) {
            return mainStm.IsIn(pState);
        }
    }
}
